{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _maybeBaby = require('maybe-baby');\n\nvar _maybeBaby2 = _interopRequireDefault(_maybeBaby);\n\nvar _isEmpty2 = require('lodash/isEmpty');\n\nvar _isEmpty3 = _interopRequireDefault(_isEmpty2);\n\nvar _isEqual2 = require('lodash/isEqual');\n\nvar _isEqual3 = _interopRequireDefault(_isEqual2);\n\nvar _FormItemTitle = require('./helpers/FormItemTitle');\n\nvar _FormItemTitle2 = _interopRequireDefault(_FormItemTitle);\n\nvar _FormItemHint = require('./helpers/FormItemHint');\n\nvar _FormItemHint2 = _interopRequireDefault(_FormItemHint);\n\nvar _ValidationFieldError = require('./validation/ValidationFieldError');\n\nvar _ValidationFieldError2 = _interopRequireDefault(_ValidationFieldError);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar FormControl = function (_React$Component) {\n  _inherits(FormControl, _React$Component);\n\n  function FormControl() {\n    _classCallCheck(this, FormControl);\n\n    return _possibleConstructorReturn(this, (FormControl.__proto__ || Object.getPrototypeOf(FormControl)).apply(this, arguments));\n  }\n\n  _createClass(FormControl, [{\n    key: 'shouldComponentUpdate',\n\n    /**\r\n     * Determine if the component should call render() to update itself.\r\n     *\r\n     * Right now, we'll always re-render the component if it contains\r\n     * children. Those components themselves will call this method to\r\n     * determine if they should re-render themselves. If this becomes\r\n     * a performance issue, we could potentially before a deep comparison\r\n     * between the prop trees, but that seems excessive right now.\r\n     *\r\n     * @param nextProps\r\n     * @returns {boolean} true if the component should call render()\r\n     */\n    value: function shouldComponentUpdate(nextProps) {\n      if (!this._hasFieldChildren(nextProps.field)) {\n        return !(0, _isEqual3.default)(nextProps, this.props);\n      }\n\n      return true;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          id = _props.id,\n          value = _props.value,\n          field = _props.field,\n          instance = _props.instance,\n          onUpdate = _props.onUpdate;\n      var component = field.component,\n          uiDecorators = field.uiDecorators;\n\n      if (!component || !component.element) {\n        console.error('Field of type \"' + field.type + '\" is missing required \"component\" (id: ' + id + ')');\n        return _react2.default.createElement(_ValidationFieldError2.default, {\n          id: field.id\n        });\n      } // Assign to uppercase for the JSX compiler\n\n\n      var Control = component.element;\n      return _react2.default.createElement('span', null, _react2.default.createElement(_FormItemTitle2.default, {\n        field: field,\n        decorators: uiDecorators,\n        instance: instance\n      }), _react2.default.createElement('div', {\n        className: 'control'\n      }, _react2.default.createElement(Control, {\n        id: id,\n        value: value,\n        field: field,\n        uiDecorators: uiDecorators,\n        onUpdate: onUpdate,\n        instance: instance\n      })), this._maybeRenderHint(uiDecorators));\n    }\n  }, {\n    key: '_maybeRenderHint',\n    value: function _maybeRenderHint(uiDecorators) {\n      if (_maybeBaby2.default.of(uiDecorators).prop('hint').isJust()) {\n        return _react2.default.createElement(_FormItemHint2.default, {\n          hint: uiDecorators.hint\n        });\n      }\n    }\n    /**\r\n     * Check for child fields, or option fields with children\r\n     * @param field\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: '_hasFieldChildren',\n    value: function _hasFieldChildren(field) {\n      if (!(0, _isEmpty3.default)(field.fields)) {\n        return true;\n      }\n\n      if (!(0, _isEmpty3.default)(field.options)) {\n        return field.options.some(function (option) {\n          return !(0, _isEmpty3.default)(option.fields);\n        });\n      }\n\n      return false;\n    }\n  }]);\n\n  return FormControl;\n}(_react2.default.Component);\n\nFormControl.propTypes = {\n  id: _propTypes2.default.string.isRequired,\n  field: _propTypes2.default.object.isRequired,\n  onUpdate: _propTypes2.default.func.isRequired,\n  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.bool, _propTypes2.default.array, _propTypes2.default.object]),\n  instance: _propTypes2.default.object.isRequired\n};\nexports.default = FormControl;","map":null,"metadata":{},"sourceType":"script"}