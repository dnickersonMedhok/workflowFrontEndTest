{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexports.default = function (ComposedComponent) {\n  var Card = function (_Component) {\n    _inherits(Card, _Component);\n\n    function Card() {\n      _classCallCheck(this, Card);\n\n      return _possibleConstructorReturn(this, (Card.__proto__ || Object.getPrototypeOf(Card)).apply(this, arguments));\n    }\n\n    _createClass(Card, [{\n      key: 'render',\n      value: function render() {\n        var _props = this.props,\n            isDragging = _props.isDragging,\n            connectDragSource = _props.connectDragSource,\n            connectDropTarget = _props.connectDropTarget;\n        var opacity = isDragging ? 0 : 1;\n        return connectDragSource(connectDropTarget(_react2.default.createElement('div', null, _react2.default.createElement(ComposedComponent, _extends({}, this.props, {\n          style: _extends({}, style, {\n            opacity: opacity\n          })\n        })))));\n      }\n    }]);\n\n    return Card;\n  }(_react.Component);\n\n  Card.propTypes = {\n    connectDragSource: _propTypes2.default.func,\n    connectDropTarget: _propTypes2.default.func,\n    index: _propTypes2.default.number.isRequired,\n    isDragging: _propTypes2.default.bool,\n    id: _propTypes2.default.any.isRequired,\n    // text: PropTypes.string.isRequired,\n    moveCard: _propTypes2.default.func.isRequired\n  };\n  var x = (0, _reactDnd.DropTarget)(_ItemTypes2.default.CARD, cardTarget, function (connect) {\n    return {\n      connectDropTarget: connect.dropTarget()\n    };\n  })(Card);\n  return (0, _reactDnd.DragSource)(_ItemTypes2.default.CARD, cardSource, function (connect, monitor) {\n    return {\n      connectDragSource: connect.dragSource(),\n      isDragging: monitor.isDragging()\n    };\n  })(x);\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDnd = require('react-dnd');\n\nvar _ItemTypes = require('./ItemTypes');\n\nvar _ItemTypes2 = _interopRequireDefault(_ItemTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar style = {\n  border: '1px dashed gray',\n  padding: '0.5rem 1rem',\n  marginBottom: '.5rem',\n  backgroundColor: 'white',\n  cursor: 'move'\n};\nvar cardSource = {\n  beginDrag: function beginDrag(props) {\n    return {\n      id: props.id,\n      index: props.index\n    };\n  }\n};\nvar cardTarget = {\n  hover: function hover(props, monitor, component) {\n    var item = monitor.getItem();\n    var dragIndex = item.index;\n    var hoverIndex = props.index; // Don't replace items with themselves\n\n    if (dragIndex === hoverIndex) {\n      return;\n    }\n\n    if (dragIndex === -1) {\n      item.index = hoverIndex;\n      props.insertCard(item.onCreate(item.data), hoverIndex);\n    } // Determine rectangle on screen\n\n\n    var hoverBoundingRect = (0, _reactDom.findDOMNode)(component).getBoundingClientRect(); // Get vertical middle\n\n    var hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2; // Determine mouse position\n\n    var clientOffset = monitor.getClientOffset(); // Get pixels to the top\n\n    var hoverClientY = clientOffset.y - hoverBoundingRect.top; // Only perform the move when the mouse has crossed half of the items height\n    // When dragging downwards, only move when the cursor is below 50%\n    // When dragging upwards, only move when the cursor is above 50%\n    // Dragging downwards\n\n    if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n      return;\n    } // Dragging upwards\n\n\n    if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n      return;\n    } // Time to actually perform the action\n\n\n    props.moveCard(dragIndex, hoverIndex); // Note: we're mutating the monitor item here!\n    // Generally it's better to avoid mutations,\n    // but it's good here for the sake of performance\n    // to avoid expensive index searches.\n\n    item.index = hoverIndex;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}