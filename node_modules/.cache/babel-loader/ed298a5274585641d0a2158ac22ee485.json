{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _isArray2 = require('lodash/isArray');\n\nvar _isArray3 = _interopRequireDefault(_isArray2);\n\nvar _validationService = require('../service/validation-service');\n\nvar _validationService2 = _interopRequireDefault(_validationService);\n\nvar _formConst = require('../config/form-const');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar ValidationResults = function () {\n  function ValidationResults() {\n    _classCallCheck(this, ValidationResults);\n\n    this.validationMap = {}; // Map keyed by tag; each entry is an array of validation messages\n\n    this.validationStateMap = {}; // Map keyed by tag; each entry is the most severe status for the tag\n\n    this.actionMap = {}; // Map keyed by action; each entry is the most severe status for that action\n\n    this.overallStatus = {}; // Holds the aggregated status of the results\n  }\n  /**\r\n   * Clear validation results\r\n   */\n\n\n  _createClass(ValidationResults, [{\n    key: 'clear',\n    value: function clear() {\n      this.validationMap = {};\n      this.validationStateMap = {};\n      this.actionMap = {};\n      this.overallStatus = _formConst.VALIDATION_CONST.STATUS.OK;\n    }\n    /**\r\n     * Add a validation message to the results object. Validation messages\r\n     * are associated to form fields via the tag property.\r\n     * @param tag\r\n     * @param type\r\n     * @param status\r\n     * @param message\r\n     * @param actions\r\n     */\n\n  }, {\n    key: 'addValidationMessage',\n    value: function addValidationMessage(tag, type, status, message, actions) {\n      var _this = this; // Create a messages list if it doesn't exist\n\n\n      var messages = this.validationMap[tag];\n\n      if (!messages) {\n        messages = [];\n        this.validationMap[tag] = messages;\n      } // Create the validation message\n\n\n      var validationMessage = {\n        tag: tag,\n        type: type,\n        status: status,\n        message: message,\n        rank: _formConst.VALIDATION_CONST.STATUS_RANKS[status]\n      };\n      messages.push(validationMessage); // Handle actions\n\n      if (actions) {\n        // Force to array if single value\n        if (!(0, _isArray3.default)(actions)) {\n          actions = [actions];\n        } // Add actions to message\n\n\n        validationMessage.actions = actions; // Update the actions with the most severe error\n\n        actions.forEach(function (action) {\n          var currentStatus = _this.actionMap[action] || _formConst.VALIDATION_CONST.STATUS.OK;\n\n          if (_validationService2.default.isMoreSevereStatus(status, currentStatus)) {\n            _this.actionMap[action] = status;\n          }\n        });\n      }\n    }\n    /**\r\n     * Create results object that contains the most severe status for the tag and\r\n     * and array of validation messages\r\n     * @param tag\r\n     * @returns {{status: (*|string), messages: (*|Array)}}\r\n     */\n\n  }, {\n    key: 'getResults',\n    value: function getResults(tag) {\n      return {\n        status: this.validationStateMap[tag] || _formConst.VALIDATION_CONST.STATUS.OK,\n        messages: this.validationMap[tag] || []\n      };\n    }\n    /**\r\n     * Perform some post-processing on the validation results. This is\r\n     * where we determine the most severe status per tag, along with\r\n     * setting the overall status of the validation results.\r\n     */\n\n  }, {\n    key: 'postProcess',\n    value: function postProcess() {\n      var _this2 = this;\n\n      var overallStatus = _formConst.VALIDATION_CONST.STATUS.OK;\n      Object.keys(this.validationMap).forEach(function (key) {\n        var messages = _this2.validationMap[key]; // Get most severe status for tag\n\n        var status = _validationService2.default.getMostSevereStatus(messages);\n\n        _this2.validationStateMap[key] = status; // Update overall status of more severe\n\n        if (_validationService2.default.isMoreSevereStatus(status, overallStatus)) {\n          _this2.overallStatus = status;\n        }\n      });\n    }\n    /**\r\n     * Convenience function for adding a \"Missing Required\" validation message\r\n     * @param tag\r\n     * @param message\r\n     * @param actions\r\n     */\n\n  }, {\n    key: 'addMissingRequired',\n    value: function addMissingRequired(tag, message, actions) {\n      this.addValidationMessage(tag, _formConst.VALIDATION_CONST.TYPE.REQUIRED, _formConst.VALIDATION_CONST.STATUS.ERROR, message, actions);\n    }\n    /**\r\n     * Convenience function for adding an \"Invalid Value\" validation message\r\n     * @param tag\r\n     * @param message\r\n     * @param actions\r\n     */\n\n  }, {\n    key: 'addInvalidValue',\n    value: function addInvalidValue(tag, message, actions) {\n      this.addValidationMessage(tag, _formConst.VALIDATION_CONST.TYPE.INVALID_VALUE, _formConst.VALIDATION_CONST.STATUS.ERROR, message, actions);\n    }\n    /**\r\n     * Return the aggregated validation results status\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: 'hasError',\n    value: function hasError() {\n      return this.overallStatus === _formConst.VALIDATION_CONST.STATUS.ERROR;\n    }\n  }]);\n\n  return ValidationResults;\n}();\n\nexports.default = ValidationResults;","map":null,"metadata":{},"sourceType":"script"}