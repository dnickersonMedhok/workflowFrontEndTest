{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _zipObject2 = require('lodash/zipObject');\n\nvar _zipObject3 = _interopRequireDefault(_zipObject2);\n\nvar _keys2 = require('lodash/keys');\n\nvar _keys3 = _interopRequireDefault(_keys2);\n\nvar _map2 = require('lodash/map');\n\nvar _map3 = _interopRequireDefault(_map2);\n\nvar _maybeBaby = require('maybe-baby');\n\nvar _maybeBaby2 = _interopRequireDefault(_maybeBaby);\n\nvar _formConst = require('./form-const');\n\nvar _formOperations = require('./form-operations');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar COMPONENT_CONFIGS = 'componentConfigs';\n/**\r\n * The FormEngine is capable of storing various data types in the instance model (e.g. string, number, date).\r\n * And for each given data type, there is a set form controls available to the UI. For instance, if a field is\r\n * of type \"array\" it can be rendered as a checkbox group, or select dropdown. A \"number\" type can be displayed\r\n * as a standard number input, or a range slider.\r\n *\r\n */\n\nvar FormConfig = function () {\n  function FormConfig() {\n    var _registerDataType, _registerDataType2, _registerDataType3, _registerDataType5;\n\n    _classCallCheck(this, FormConfig);\n\n    this.typeConfigs = {};\n\n    this.__registerDataType(_formConst.DATA_TYPE.STRING, (_registerDataType = {}, _defineProperty(_registerDataType, _formConst.COMPONENT_TYPE.TEXT, require('../../components/form/controls/Text').default), _defineProperty(_registerDataType, _formConst.COMPONENT_TYPE.PASSWORD, require('../../components/form/controls/Text').default), _defineProperty(_registerDataType, _formConst.COMPONENT_TYPE.TEXTAREA, require('../../components/form/controls/Textarea').default), _defineProperty(_registerDataType, _formConst.COMPONENT_TYPE.SELECT, require('../../components/form/controls/Select').default), _defineProperty(_registerDataType, _formConst.COMPONENT_TYPE.RADIO, require('../../components/form/controls/Radio').default), _registerDataType));\n\n    this.__registerDataType(_formConst.DATA_TYPE.BOOLEAN, (_registerDataType2 = {}, _defineProperty(_registerDataType2, _formConst.COMPONENT_TYPE.CHECKBOX, require('../../components/form/controls/Checkbox').default), _defineProperty(_registerDataType2, _formConst.COMPONENT_TYPE.RADIO, require('../../components/form/controls/Radio').default), _registerDataType2));\n\n    this.__registerDataType(_formConst.DATA_TYPE.NUMBER, (_registerDataType3 = {}, _defineProperty(_registerDataType3, _formConst.COMPONENT_TYPE.NUMBER, require('../../components/form/controls/Number').default), _defineProperty(_registerDataType3, _formConst.COMPONENT_TYPE.RANGE, require('../../components/form/controls/Range').default), _registerDataType3));\n\n    this.__registerDataType(_formConst.DATA_TYPE.DATE, _defineProperty({}, _formConst.COMPONENT_TYPE.DATE, require('../../components/form/controls/DateTime').default));\n\n    this.__registerDataType(_formConst.DATA_TYPE.ARRAY, (_registerDataType5 = {}, _defineProperty(_registerDataType5, _formConst.COMPONENT_TYPE.SELECT, require('../../components/form/controls/Select').default), _defineProperty(_registerDataType5, _formConst.COMPONENT_TYPE.CHECKBOXGROUP, require('../../components/form/controls/CheckboxGroup').default), _registerDataType5));\n  }\n\n  _createClass(FormConfig, [{\n    key: '__registerDataType',\n    value: function __registerDataType(type, components) {\n      var _this = this;\n\n      this.typeConfigs[type] = _defineProperty({\n        type: type\n      }, COMPONENT_CONFIGS, (0, _zipObject3.default)((0, _keys3.default)(components), (0, _map3.default)(components, function (component, key) {\n        var config = {\n          dataType: type,\n          component: {\n            type: key,\n            element: component\n          },\n          actions: {\n            onUpdate: _this._getOperation(type, key, _formOperations.OPERATION_TYPES.ON_UPDATE)\n          }\n        };\n\n        if (_this._hasDecorators(key)) {\n          config.defaultDecorators = _this._getDefaultDecorators(key);\n        }\n\n        return config;\n      })));\n    }\n    /**\r\n     * Return a typeConfig, which is a map of React components and metadata keyed by component type\r\n     * @param type\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: 'getTypeConfig',\n    value: function getTypeConfig(type) {\n      if (!type) throw new Error('Type cannot be null/undefined');\n\n      if (this.typeConfigs[type]) {\n        return this.typeConfigs[type];\n      }\n\n      console.warn('Unmapped data type: ' + type);\n    }\n    /**\r\n     * Given a data type, Return a map of React components keyed by component type\r\n     * @param dataType\r\n     * @returns {TResult|_.Dictionary<any>|Object|*}\r\n     */\n\n  }, {\n    key: 'getComponentConfigsByDataType',\n    value: function getComponentConfigsByDataType(dataType) {\n      var typeConfig = this.getTypeConfig(dataType);\n      if (typeConfig) return this.getComponentConfigsByTypeConfig(typeConfig);\n      console.warn('Unmapped data type: ' + dataType);\n    }\n  }, {\n    key: 'getComponentConfigsByTypeConfig',\n    value: function getComponentConfigsByTypeConfig(typeConfig) {\n      if (typeConfig && typeConfig[COMPONENT_CONFIGS]) {\n        return typeConfig[COMPONENT_CONFIGS];\n      }\n\n      console.warn('Unmapped type config: ' + typeConfig);\n    }\n  }, {\n    key: 'getComponentConfig',\n    value: function getComponentConfig(dataType, componentType) {\n      var components = this.getComponentConfigsByDataType(dataType);\n\n      if (components && components[componentType]) {\n        return components[componentType];\n      }\n\n      console.warn('Unmapped component type \"' + componentType + '\" for data type: \"' + dataType + '\"');\n    }\n  }, {\n    key: 'getComponentTypeByField',\n    value: function getComponentTypeByField(field) {\n      if (!field) throw new Error('field is required');\n\n      if (this.hasComponentDecorator(field)) {\n        return this.getComponentDecorator(field);\n      }\n\n      return this.getDefaultComponentTypeByDataType(field);\n    }\n  }, {\n    key: 'getDefaultComponentTypeByDataType',\n    value: function getDefaultComponentTypeByDataType(field) {\n      if (!field) throw new Error('field is required');\n\n      switch (field.type) {\n        case _formConst.DATA_TYPE.BOOLEAN:\n          return this.hasOptions(field) ? _formConst.COMPONENT_TYPE.RADIO : _formConst.COMPONENT_TYPE.CHECKBOX;\n\n        case _formConst.DATA_TYPE.STRING:\n          return this.hasOptions(field) ? _formConst.COMPONENT_TYPE.SELECT : _formConst.COMPONENT_TYPE.TEXT;\n\n        case _formConst.DATA_TYPE.NUMBER:\n          return _formConst.COMPONENT_TYPE.NUMBER;\n\n        case _formConst.DATA_TYPE.DATE:\n          return _formConst.COMPONENT_TYPE.DATE;\n\n        case _formConst.DATA_TYPE.ARRAY:\n          return _formConst.COMPONENT_TYPE.SELECT;\n\n        default:\n          {\n            console.warn('Unmapped data type: \"' + field.type + '\"');\n          }\n      }\n    }\n  }, {\n    key: 'hasComponentDecorator',\n    value: function hasComponentDecorator(field) {\n      return _maybeBaby2.default.of(field).prop('uiDecorators').prop('component').prop('type').isJust();\n    }\n  }, {\n    key: 'getComponentDecorator',\n    value: function getComponentDecorator(field) {\n      return _maybeBaby2.default.of(field).prop('uiDecorators').prop('component').prop('type').join();\n    }\n  }, {\n    key: 'hasOptions',\n    value: function hasOptions(field) {\n      return _maybeBaby2.default.of(field).prop('options').isJust();\n    }\n  }, {\n    key: '_getOperation',\n    value: function _getOperation(fieldType, componentType, operation) {\n      var _getOperations2 = this._getOperations(fieldType, componentType),\n          field = _getOperations2.field,\n          component = _getOperations2.component;\n\n      if (component && component[operation]) {\n        return component[operation];\n      } else if (field && field[operation]) {\n        return field[operation];\n      }\n\n      console.warn('Unmapped operations for field/component type: ' + fieldType + '/' + componentType);\n    }\n  }, {\n    key: '_getOperations',\n    value: function _getOperations(fieldType, componentType) {\n      return {\n        field: _formOperations.DATA_TYPE_OPERATIONS[fieldType],\n        component: _formOperations.COMPONENT_OPERATIONS[componentType]\n      };\n    }\n  }, {\n    key: '_hasDecorators',\n    value: function _hasDecorators(componentType) {\n      return !!this._getDefaultDecorators(componentType);\n    }\n  }, {\n    key: '_getDefaultDecorators',\n    value: function _getDefaultDecorators(componentType) {\n      return _formConst.COMPONENT_DECORATORS[componentType];\n    }\n  }]);\n\n  return FormConfig;\n}();\n\nexports.default = new FormConfig();","map":null,"metadata":{},"sourceType":"script"}