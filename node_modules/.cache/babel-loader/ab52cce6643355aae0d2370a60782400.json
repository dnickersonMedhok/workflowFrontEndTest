{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _dynamicOptionList = require('./dynamic-option-list');\n\nvar _dynamicOptionList2 = _interopRequireDefault(_dynamicOptionList);\n\nvar _reactTextareaAutosize = require('react-textarea-autosize');\n\nvar _reactTextareaAutosize2 = _interopRequireDefault(_reactTextareaAutosize);\n\nvar _draftJs = require('draft-js');\n\nvar _draftjsToHtml = require('draftjs-to-html');\n\nvar _draftjsToHtml2 = _interopRequireDefault(_draftjsToHtml);\n\nvar _reactDraftWysiwyg = require('react-draft-wysiwyg');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar toolbar = {\n  options: ['inline', 'list', 'textAlign', 'fontSize', 'link', 'history'],\n  inline: {\n    inDropdown: false,\n    className: undefined,\n    options: ['bold', 'italic', 'underline', 'superscript', 'subscript']\n  }\n};\n\nvar FormElementsEdit = function (_React$Component) {\n  _inherits(FormElementsEdit, _React$Component);\n\n  function FormElementsEdit(props) {\n    _classCallCheck(this, FormElementsEdit);\n\n    var _this = _possibleConstructorReturn(this, (FormElementsEdit.__proto__ || Object.getPrototypeOf(FormElementsEdit)).call(this, props));\n\n    _this.state = {\n      element: _this.props.element,\n      data: _this.props.data,\n      dirty: false\n    };\n    return _this;\n  }\n\n  _createClass(FormElementsEdit, [{\n    key: 'toggleRequired',\n    value: function toggleRequired() {\n      var this_element = this.state.element;\n    }\n  }, {\n    key: 'editElementProp',\n    value: function editElementProp(elemProperty, targProperty, e) {\n      var _this2 = this; // elemProperty could be content or label\n      // targProperty could be value or checked\n\n\n      var this_element = this.state.element;\n      this_element[elemProperty] = e.target[targProperty];\n      this.setState({\n        element: this_element,\n        dirty: true\n      }, function () {\n        if (targProperty === 'checked') {\n          _this2.updateElement();\n        }\n\n        ;\n      });\n    }\n  }, {\n    key: 'onEditorStateChange',\n    value: function onEditorStateChange(index, property, editorContent) {\n      var html = (0, _draftjsToHtml2.default)((0, _draftJs.convertToRaw)(editorContent.getCurrentContent())).replace(/<p>/g, '<div>').replace(/<\\/p>/g, '</div>');\n      var this_element = this.state.element;\n      this_element[property] = html;\n      this.setState({\n        element: this_element,\n        dirty: true\n      });\n    }\n  }, {\n    key: 'updateElement',\n    value: function updateElement() {\n      var this_element = this.state.element; // to prevent ajax calls with no change\n\n      if (this.state.dirty) {\n        this.props.updateElement.call(this.props.preview, this_element);\n        this.setState({\n          dirty: false\n        });\n      }\n    }\n  }, {\n    key: 'convertFromHTML',\n    value: function convertFromHTML(content) {\n      var newContent = (0, _draftJs.convertFromHTML)(content);\n\n      if (!newContent.contentBlocks) {\n        // to prevent crash when no contents in editor\n        return _draftJs.EditorState.createEmpty();\n      }\n\n      var contentState = _draftJs.ContentState.createFromBlockArray(newContent);\n\n      return _draftJs.EditorState.createWithContent(contentState);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var this_checked = this.props.element.hasOwnProperty('required') ? this.props.element.required : false;\n      var this_read_only = this.props.element.hasOwnProperty('readOnly') ? this.props.element.readOnly : false;\n      var this_default_today = this.props.element.hasOwnProperty('defaultToday') ? this.props.element.defaultToday : false;\n      var this_checked_inline = this.props.element.hasOwnProperty('inline') ? this.props.element.inline : false;\n      var this_checked_bold = this.props.element.hasOwnProperty('bold') ? this.props.element.bold : false;\n      var this_checked_italic = this.props.element.hasOwnProperty('italic') ? this.props.element.italic : false;\n      var this_checked_center = this.props.element.hasOwnProperty('center') ? this.props.element.center : false;\n      var this_checked_page_break = this.props.element.hasOwnProperty('pageBreakBefore') ? this.props.element.pageBreakBefore : false;\n      var this_checked_alternate_form = this.props.element.hasOwnProperty('alternateForm') ? this.props.element.alternateForm : false;\n      var this_files = this.props.files.length ? this.props.files : [];\n      if (this_files.length < 1 || this_files.length > 0 && this_files[0].id !== \"\") this_files.unshift({\n        id: '',\n        file_name: ''\n      });\n      var editorState = void 0;\n\n      if (this.props.element.hasOwnProperty('content')) {\n        editorState = this.convertFromHTML(this.props.element.content);\n      }\n\n      if (this.props.element.hasOwnProperty('label')) {\n        editorState = this.convertFromHTML(this.props.element.label);\n      }\n\n      return _react2.default.createElement('div', null, _react2.default.createElement('div', {\n        className: 'clearfix'\n      }, _react2.default.createElement('h4', {\n        className: 'pull-left'\n      }, this.props.element.text), _react2.default.createElement('i', {\n        className: 'pull-right fa fa-times dismiss-edit',\n        onClick: this.props.manualEditModeOff\n      })), this.props.element.hasOwnProperty('content') && _react2.default.createElement('div', {\n        className: 'form-group'\n      }, _react2.default.createElement('label', {\n        className: 'control-label'\n      }, 'Text to display:'), _react2.default.createElement(_reactDraftWysiwyg.Editor, {\n        toolbar: toolbar,\n        defaultEditorState: editorState,\n        onBlur: this.updateElement.bind(this),\n        onEditorStateChange: this.onEditorStateChange.bind(this, 0, 'content')\n      })), this.props.element.hasOwnProperty('file_path') && _react2.default.createElement('div', {\n        className: 'form-group'\n      }, _react2.default.createElement('label', {\n        className: 'control-label',\n        htmlFor: 'fileSelect'\n      }, 'Choose file:'), _react2.default.createElement('select', {\n        id: 'fileSelect',\n        className: 'form-control',\n        defaultValue: this.props.element.file_path,\n        onBlur: this.updateElement.bind(this),\n        onChange: this.editElementProp.bind(this, 'file_path', 'value')\n      }, this_files.map(function (file) {\n        var this_key = 'file_' + file.id;\n        return _react2.default.createElement('option', {\n          value: file.id,\n          key: this_key\n        }, file.file_name);\n      }))), this.props.element.hasOwnProperty('href') && _react2.default.createElement('div', {\n        className: 'form-group'\n      }, _react2.default.createElement(_reactTextareaAutosize2.default, {\n        type: 'text',\n        className: 'form-control',\n        defaultValue: this.props.element.href,\n        onBlur: this.updateElement.bind(this),\n        onChange: this.editElementProp.bind(this, 'href', 'value')\n      })), this.props.element.hasOwnProperty('src') && _react2.default.createElement('div', null, _react2.default.createElement('div', {\n        className: 'form-group'\n      }, _react2.default.createElement('label', {\n        className: 'control-label',\n        htmlFor: 'srcInput'\n      }, 'Link to:'), _react2.default.createElement('input', {\n        id: 'srcInput',\n        type: 'text',\n        className: 'form-control',\n        defaultValue: this.props.element.src,\n        onBlur: this.updateElement.bind(this),\n        onChange: this.editElementProp.bind(this, 'src', 'value')\n      })), _react2.default.createElement('div', {\n        className: 'form-group'\n      }, _react2.default.createElement('div', {\n        className: 'checkbox'\n      }, _react2.default.createElement('label', null, _react2.default.createElement('input', {\n        type: 'checkbox',\n        checked: this_checked_center,\n        value: true,\n        onChange: this.editElementProp.bind(this, 'center', 'checked')\n      }), 'Center?'))), _react2.default.createElement('div', {\n        className: 'row'\n      }, _react2.default.createElement('div', {\n        className: 'col-sm-3'\n      }, _react2.default.createElement('label', {\n        className: 'control-label',\n        htmlFor: 'elementWidth'\n      }, 'Width:'), _react2.default.createElement('input', {\n        id: 'elementWidth',\n        type: 'text',\n        className: 'form-control',\n        defaultValue: this.props.element.width,\n        onBlur: this.updateElement.bind(this),\n        onChange: this.editElementProp.bind(this, 'width', 'value')\n      })), _react2.default.createElement('div', {\n        className: 'col-sm-3'\n      }, _react2.default.createElement('label', {\n        className: 'control-label',\n        htmlFor: 'elementHeight'\n      }, 'Height:'), _react2.default.createElement('input', {\n        id: 'elementHeight',\n        type: 'text',\n        className: 'form-control',\n        defaultValue: this.props.element.height,\n        onBlur: this.updateElement.bind(this),\n        onChange: this.editElementProp.bind(this, 'height', 'value')\n      })))), this.props.element.hasOwnProperty('label') && _react2.default.createElement('div', {\n        className: 'form-group'\n      }, _react2.default.createElement('label', null, 'Display Label'), _react2.default.createElement(_reactDraftWysiwyg.Editor, {\n        toolbar: toolbar,\n        defaultEditorState: editorState,\n        onBlur: this.updateElement.bind(this),\n        onEditorStateChange: this.onEditorStateChange.bind(this, 0, 'label')\n      }), _react2.default.createElement('br', null), _react2.default.createElement('div', {\n        className: 'checkbox'\n      }, _react2.default.createElement('label', null, _react2.default.createElement('input', {\n        type: 'checkbox',\n        checked: this_checked,\n        value: true,\n        onChange: this.editElementProp.bind(this, 'required', 'checked')\n      }), 'Required')), this.props.element.hasOwnProperty('readOnly') && _react2.default.createElement('div', {\n        className: 'checkbox'\n      }, _react2.default.createElement('label', null, _react2.default.createElement('input', {\n        type: 'checkbox',\n        checked: this_read_only,\n        value: true,\n        onChange: this.editElementProp.bind(this, 'readOnly', 'checked')\n      }), 'Read only')), this.props.element.hasOwnProperty('defaultToday') && _react2.default.createElement('div', {\n        className: 'checkbox'\n      }, _react2.default.createElement('label', null, _react2.default.createElement('input', {\n        type: 'checkbox',\n        checked: this_default_today,\n        value: true,\n        onChange: this.editElementProp.bind(this, 'defaultToday', 'checked')\n      }), 'Default to Today?')), (this.state.element.element === 'RadioButtons' || this.state.element.element === 'Checkboxes') && _react2.default.createElement('div', {\n        className: 'checkbox'\n      }, _react2.default.createElement('label', null, _react2.default.createElement('input', {\n        type: 'checkbox',\n        checked: this_checked_inline,\n        value: true,\n        onChange: this.editElementProp.bind(this, 'inline', 'checked')\n      }), 'Display horizonal'))), this.state.element.element === 'Signature' && this.props.element.readOnly ? _react2.default.createElement('div', {\n        className: 'form-group'\n      }, _react2.default.createElement('label', {\n        className: 'control-label',\n        htmlFor: 'variableKey'\n      }, 'Variable Key:'), _react2.default.createElement('input', {\n        id: 'variableKey',\n        type: 'text',\n        className: 'form-control',\n        defaultValue: this.props.element.variableKey,\n        onBlur: this.updateElement.bind(this),\n        onChange: this.editElementProp.bind(this, 'variableKey', 'value')\n      }), _react2.default.createElement('p', {\n        className: 'help-block'\n      }, 'This will give the element a key that can be used to replace the content with a runtime value.')) : _react2.default.createElement('div', null), _react2.default.createElement('div', {\n        className: 'form-group'\n      }, _react2.default.createElement('label', {\n        className: 'control-label'\n      }, 'Print Options'), _react2.default.createElement('div', {\n        className: 'checkbox'\n      }, _react2.default.createElement('label', null, _react2.default.createElement('input', {\n        type: 'checkbox',\n        checked: this_checked_page_break,\n        value: true,\n        onChange: this.editElementProp.bind(this, 'pageBreakBefore', 'checked')\n      }), 'Page Break Before Element?'))), _react2.default.createElement('div', {\n        className: 'form-group'\n      }, _react2.default.createElement('label', {\n        className: 'control-label'\n      }, 'Alternate/Signature Page'), _react2.default.createElement('div', {\n        className: 'checkbox'\n      }, _react2.default.createElement('label', null, _react2.default.createElement('input', {\n        type: 'checkbox',\n        checked: this_checked_alternate_form,\n        value: true,\n        onChange: this.editElementProp.bind(this, 'alternateForm', 'checked')\n      }), 'Display on alternate/signature Page?'))), this.props.element.hasOwnProperty('step') && _react2.default.createElement('div', {\n        className: 'form-group'\n      }, _react2.default.createElement('div', {\n        className: 'form-group-range'\n      }, _react2.default.createElement('label', {\n        className: 'control-label',\n        htmlFor: 'rangeStep'\n      }, 'Step'), _react2.default.createElement('input', {\n        id: 'rangeStep',\n        type: 'number',\n        className: 'form-control',\n        defaultValue: this.props.element.step,\n        onBlur: this.updateElement.bind(this),\n        onChange: this.editElementProp.bind(this, 'step', 'value')\n      }))), this.props.element.hasOwnProperty('min_value') && _react2.default.createElement('div', {\n        className: 'form-group'\n      }, _react2.default.createElement('div', {\n        className: 'form-group-range'\n      }, _react2.default.createElement('label', {\n        className: 'control-label',\n        htmlFor: 'rangeMin'\n      }, 'Min'), _react2.default.createElement('input', {\n        id: 'rangeMin',\n        type: 'number',\n        className: 'form-control',\n        defaultValue: this.props.element.min_value,\n        onBlur: this.updateElement.bind(this),\n        onChange: this.editElementProp.bind(this, 'min_value', 'value')\n      }), _react2.default.createElement('input', {\n        type: 'text',\n        className: 'form-control',\n        defaultValue: this.props.element.min_label,\n        onBlur: this.updateElement.bind(this),\n        onChange: this.editElementProp.bind(this, 'min_label', 'value')\n      }))), this.props.element.hasOwnProperty('max_value') && _react2.default.createElement('div', {\n        className: 'form-group'\n      }, _react2.default.createElement('div', {\n        className: 'form-group-range'\n      }, _react2.default.createElement('label', {\n        className: 'control-label',\n        htmlFor: 'rangeMax'\n      }, 'Max'), _react2.default.createElement('input', {\n        id: 'rangeMax',\n        type: 'number',\n        className: 'form-control',\n        defaultValue: this.props.element.max_value,\n        onBlur: this.updateElement.bind(this),\n        onChange: this.editElementProp.bind(this, 'max_value', 'value')\n      }), _react2.default.createElement('input', {\n        type: 'text',\n        className: 'form-control',\n        defaultValue: this.props.element.max_label,\n        onBlur: this.updateElement.bind(this),\n        onChange: this.editElementProp.bind(this, 'max_label', 'value')\n      }))), this.props.element.hasOwnProperty('default_value') && _react2.default.createElement('div', {\n        className: 'form-group'\n      }, _react2.default.createElement('div', {\n        className: 'form-group-range'\n      }, _react2.default.createElement('label', {\n        className: 'control-label',\n        htmlFor: 'defaultSelected'\n      }, 'Default Selected'), _react2.default.createElement('input', {\n        id: 'defaultSelected',\n        type: 'number',\n        className: 'form-control',\n        defaultValue: this.props.element.default_value,\n        onBlur: this.updateElement.bind(this),\n        onChange: this.editElementProp.bind(this, 'default_value', 'value')\n      }))), this.props.element.hasOwnProperty('static') && this.props.element.static && _react2.default.createElement('div', {\n        className: 'form-group'\n      }, _react2.default.createElement('label', {\n        className: 'control-label'\n      }, 'Text Style'), _react2.default.createElement('div', {\n        className: 'checkbox'\n      }, _react2.default.createElement('label', null, _react2.default.createElement('input', {\n        type: 'checkbox',\n        checked: this_checked_bold,\n        value: true,\n        onChange: this.editElementProp.bind(this, 'bold', 'checked')\n      }), 'Bold')), _react2.default.createElement('div', {\n        className: 'checkbox'\n      }, _react2.default.createElement('label', null, _react2.default.createElement('input', {\n        type: 'checkbox',\n        checked: this_checked_italic,\n        value: true,\n        onChange: this.editElementProp.bind(this, 'italic', 'checked')\n      }), 'Italic'))), this.props.showCorrectColumn && this.props.element.canHaveAnswer && !this.props.element.hasOwnProperty('options') && _react2.default.createElement('div', {\n        className: 'form-group'\n      }, _react2.default.createElement('label', {\n        className: 'control-label',\n        htmlFor: 'correctAnswer'\n      }, 'Correct Answer'), _react2.default.createElement('input', {\n        id: 'correctAnswer',\n        type: 'text',\n        className: 'form-control',\n        defaultValue: this.props.element.correct,\n        onBlur: this.updateElement.bind(this),\n        onChange: this.editElementProp.bind(this, 'correct', 'value')\n      })), this.props.element.hasOwnProperty('options') && _react2.default.createElement(_dynamicOptionList2.default, {\n        showCorrectColumn: this.props.showCorrectColumn,\n        data: this.props.preview.state.data,\n        updateElement: this.props.updateElement,\n        preview: this.props.preview,\n        element: this.props.element,\n        key: this.props.element.options.length\n      }));\n    }\n  }]);\n\n  return FormElementsEdit;\n}(_react2.default.Component);\n\nexports.default = FormElementsEdit;\nFormElementsEdit.defaultProps = {\n  className: 'edit-element-fields'\n};","map":null,"metadata":{},"sourceType":"script"}