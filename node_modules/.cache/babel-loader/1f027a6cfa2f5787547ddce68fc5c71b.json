{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _common = require('../components/common');\n\nvar _common2 = require('../common');\n\nvar svc = {};\nvar TabService = svc = {\n  buildTabs: function buildTabs(children) {\n    var tabs = !Array.isArray(children) ? [children] : children;\n    return tabs.filter(function (tab) {\n      if (!tab) return false;\n      var hide = tab.props.hide;\n\n      if (typeof hide === 'function') {\n        return !hide();\n      }\n\n      return hide !== true;\n    });\n  },\n  getDerivedTheme: function getDerivedTheme(theme) {\n    if (!theme || (0, _common2.__isEmpty)(theme)) {\n      return _common.DEFAULT_THEME;\n    }\n\n    var derivedTheme = {};\n\n    if (!theme.tabs || (0, _common2.__isEmpty)(theme.tabs)) {\n      derivedTheme.tabs = _common.DEFAULT_THEME.tabs;\n    } else {\n      derivedTheme.tabs = svc._getDerivedTabsTheme(theme.tabs, _common.DEFAULT_THEME.tabs);\n    }\n\n    if (!theme.menu || (0, _common2.__isEmpty)(theme.menu)) {\n      derivedTheme.menu = _common.DEFAULT_THEME.menu;\n    } else {\n      derivedTheme.menu = svc._getDerivedMenuTheme(theme.menu, _common.DEFAULT_THEME.menu);\n    }\n\n    return derivedTheme;\n  },\n  _getDerivedTabsTheme: function _getDerivedTabsTheme(tabs, theme) {\n    var active = tabs.active,\n        hover = tabs.hover;\n    return {\n      color: (0, _common2.__valOrDefault)(function () {\n        return tabs.color;\n      }, theme.color),\n      borderBottomColor: (0, _common2.__valOrDefault)(function () {\n        return tabs.borderBottomColor;\n      }, theme.borderBottomColor),\n      active: {\n        borderBottomColor: (0, _common2.__valOrDefault)(function () {\n          return active.borderBottomColor;\n        }, theme.active.borderBottomColor),\n        color: (0, _common2.__valOrDefault)(function () {\n          return active.color;\n        }, theme.active.color)\n      },\n      hover: {\n        borderBottomColor: (0, _common2.__valOrDefault)(function () {\n          return hover.borderBottomColor;\n        }, theme.hover.borderBottomColor),\n        color: (0, _common2.__valOrDefault)(function () {\n          return hover.color;\n        }, theme.hover.color)\n      }\n    };\n  },\n  _getDerivedMenuTheme: function _getDerivedMenuTheme(menu, theme) {\n    var active = menu.active,\n        hover = menu.hover;\n    return {\n      color: (0, _common2.__valOrDefault)(function () {\n        return menu.color;\n      }, theme.color),\n      borderRight: (0, _common2.__valOrDefault)(function () {\n        return menu.borderRight;\n      }, theme.borderRight),\n      active: {\n        backgroundColor: (0, _common2.__valOrDefault)(function () {\n          return active.backgroundColor;\n        }, theme.active.backgroundColor),\n        color: (0, _common2.__valOrDefault)(function () {\n          return active.color;\n        }, theme.active.color)\n      },\n      hover: {\n        backgroundColor: (0, _common2.__valOrDefault)(function () {\n          return hover.backgroundColor;\n        }, theme.hover.backgroundColor),\n        color: (0, _common2.__valOrDefault)(function () {\n          return hover.color;\n        }, theme.hover.color)\n      }\n    };\n  },\n  detectDescendantTypeMismatches: function detectDescendantTypeMismatches(children) {\n    var tabs = svc.buildTabs(children);\n    var typeMismatches = (0, _common2.__getTypeMismatches)(tabs);\n\n    if (typeMismatches.length > 0) {\n      (0, _common2.__logTypeMismatches)(typeMismatches);\n      throw new Error('Descendant type mismatches detected');\n    }\n  },\n  detectControlledUncontrolledPropMismatches: function detectControlledUncontrolledPropMismatches(activeKey, defaultActiveKey, onSelect, sticky) {\n    if ((0, _common2.__hasValues)(activeKey, defaultActiveKey)) {\n      throw new Error('Mixing controlled and uncontrolled props. Specify an \"activeKey\" or a \"defaultActiveKey\", but not both');\n    }\n\n    if ((0, _common2.__hasValues)(onSelect, defaultActiveKey)) {\n      throw new Error('Mixing controlled and uncontrolled props. If specifying an \"onSelect\" function, use \"activeKey\" instead of \"defaultActiveKey');\n    }\n\n    if ((0, _common2.__hasValue)(onSelect) && !(0, _common2.__hasValue)(activeKey)) {\n      throw new Error('Mixing controlled and uncontrolled props. If specifying an \"onSelect\" function, you must pass an \"activeKey');\n    }\n\n    if ((0, _common2.__hasValues)(sticky, activeKey)) {\n      throw new Error('Mixing controlled and uncontrolled props. Cannot specify \"sticky\" and \"activeKey\". Only uncontrolled components can maintain internal stickiness.');\n    }\n  }\n};\nexports.default = TabService;","map":null,"metadata":{},"sourceType":"script"}