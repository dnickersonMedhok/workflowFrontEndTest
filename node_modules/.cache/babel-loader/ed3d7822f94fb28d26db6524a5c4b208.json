{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _REQUIRED;\n\nvar _isEmpty2 = require('lodash/isEmpty');\n\nvar _isEmpty3 = _interopRequireDefault(_isEmpty2);\n\nvar _common = require('../../common');\n\nvar _formConst = require('../config/form-const');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _getStatus(errorCondition) {\n  return errorCondition ? _formConst.VALIDATION_CONST.STATUS.ERROR : _formConst.VALIDATION_CONST.STATUS.OK;\n}\n/**\r\n * Available VALIDATORS keyed by validation type. Each validation type\r\n * may contain one or more data types.\r\n * @type {{REQUIRED: {}, NUMERIC: {}}}\r\n */\n\n\nvar VALIDATORS = {\n  REQUIRED: (_REQUIRED = {}, _defineProperty(_REQUIRED, _formConst.DATA_TYPE.ARRAY, function (field, value) {\n    return _getStatus((0, _isEmpty3.default)(value));\n  }), _defineProperty(_REQUIRED, _formConst.DATA_TYPE.BOOLEAN, function () {\n    return _formConst.VALIDATION_CONST.STATUS.OK;\n  }), _defineProperty(_REQUIRED, _formConst.DATA_TYPE.DATE, function (field, value) {\n    return _getStatus((0, _common.__isBlank)(value));\n  }), _defineProperty(_REQUIRED, _formConst.DATA_TYPE.NUMBER, function (field, value) {\n    return _getStatus(Number.isNaN(value));\n  }), _defineProperty(_REQUIRED, _formConst.DATA_TYPE.STRING, function (field, value) {\n    return _getStatus((0, _common.__isBlank)(value));\n  }), _REQUIRED),\n  NUMERIC: _defineProperty({}, _formConst.DATA_TYPE.NUMBER, function (field, value) {\n    if ((0, _common.__hasValue)(field.min) && value < field.min) return _formConst.VALIDATION_CONST.STATUS.ERROR;\n    if ((0, _common.__hasValue)(field.max) && value > field.max) return _formConst.VALIDATION_CONST.STATUS.ERROR;\n  })\n};\nexports.default = {\n  /**\r\n   * Invoke a validator based on field data type\r\n   * @param validators\r\n   * @param field\r\n   * @param value\r\n   * @returns {*}\r\n   */\n  validate: function validate(validators, field, value) {\n    var validator = validators[field.type];\n\n    if (validator) {\n      return validator(field, value);\n    }\n\n    console.warn('No type validator found for type: ' + field.type);\n  },\n\n  /**\r\n   * Determine if the model value exists\r\n   * @param value\r\n   * @returns {*}\r\n   */\n  checkRequired: function checkRequired(field, value) {\n    return this.validate(VALIDATORS.REQUIRED, field, value);\n  },\n\n  /**\r\n   * Determine if the model value passes the min/max check\r\n   * @param field\r\n   * @param value\r\n   * @returns {*}\r\n   */\n  checkNumeric: function checkNumeric(field, value) {\n    return this.validate(VALIDATORS.NUMERIC, field, value);\n  },\n\n  /**\r\n   * Determine if the model value matches the regex pattern\r\n   * @param field\r\n   * @param value\r\n   * @returns {boolean}\r\n   */\n  checkPattern: function checkPattern(field, value) {\n    return field.pattern.test(value);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}