{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _fbemitter = require('fbemitter');\n\nvar _formValidator = require('./form-validator');\n\nvar _formValidator2 = _interopRequireDefault(_formValidator);\n\nvar _formElements = require('./form-elements');\n\nvar FormElements = _interopRequireWildcard(_formElements);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\r\n  * <Form />\r\n  */\n\n\nvar ReactForm = function (_React$Component) {\n  _inherits(ReactForm, _React$Component);\n\n  function ReactForm(props) {\n    _classCallCheck(this, ReactForm);\n\n    var _this = _possibleConstructorReturn(this, (ReactForm.__proto__ || Object.getPrototypeOf(ReactForm)).call(this, props));\n\n    _this.inputs = {};\n    _this.emitter = new _fbemitter.EventEmitter();\n    return _this;\n  }\n\n  _createClass(ReactForm, [{\n    key: '_checkboxesDefaultValue',\n    value: function _checkboxesDefaultValue(item) {\n      var _this2 = this;\n\n      var defaultChecked = [];\n      item.options.forEach(function (option) {\n        defaultChecked.push(_this2.props.answer_data['option_' + option.key]);\n      });\n      return defaultChecked;\n    }\n  }, {\n    key: '_getItemValue',\n    value: function _getItemValue(item, ref) {\n      var $item = {\n        element: item.element,\n        value: ''\n      };\n\n      if (item.element === 'Rating') {\n        $item.value = ref.inputField.current.state.rating;\n      } else {\n        if (item.element === 'Tags') {\n          $item.value = ref.inputField.current.state.value;\n        } else if (item.element === 'DatePicker') {\n          $item.value = ref.state.value;\n        } else if (ref && ref.inputField) {\n          $item = _reactDom2.default.findDOMNode(ref.inputField.current);\n          $item.value = $item.value.trim();\n        }\n      }\n\n      return $item;\n    }\n  }, {\n    key: '_isIncorrect',\n    value: function _isIncorrect(item) {\n      var incorrect = false;\n\n      if (item.canHaveAnswer) {\n        var ref = this.inputs[item.field_name];\n\n        if (item.element === 'Checkboxes' || item.element === 'RadioButtons') {\n          item.options.forEach(function (option) {\n            var $option = _reactDom2.default.findDOMNode(ref.options['child_ref_' + option.key]);\n\n            if (option.hasOwnProperty('correct') && !$option.checked || !option.hasOwnProperty('correct') && $option.checked) {\n              incorrect = true;\n            }\n          });\n        } else {\n          var $item = this._getItemValue(item, ref);\n\n          if (item.element === 'Rating') {\n            if ($item.value.toString() !== item.correct) {\n              incorrect = true;\n            }\n          } else if ($item.value.toLowerCase() !== item.correct.trim().toLowerCase()) {\n            incorrect = true;\n          }\n        }\n      }\n\n      return incorrect;\n    }\n  }, {\n    key: '_isInvalid',\n    value: function _isInvalid(item) {\n      var invalid = false;\n\n      if (item.required === true) {\n        var ref = this.inputs[item.field_name];\n\n        if (item.element === 'Checkboxes' || item.element === 'RadioButtons') {\n          var checked_options = 0;\n          item.options.forEach(function (option) {\n            var $option = _reactDom2.default.findDOMNode(ref.options['child_ref_' + option.key]);\n\n            if ($option.checked) {\n              checked_options += 1;\n            }\n          });\n\n          if (checked_options < 1) {\n            // errors.push(item.label + ' is required!');\n            invalid = true;\n          }\n        } else {\n          var $item = this._getItemValue(item, ref);\n\n          if (item.element === 'Rating') {\n            if ($item.value === 0) {\n              invalid = true;\n            }\n          } else if ($item.value === undefined || $item.value.length < 1) {\n            invalid = true;\n          }\n        }\n      }\n\n      return invalid;\n    }\n  }, {\n    key: '_collect',\n    value: function _collect(item) {\n      var itemData = {\n        name: item.field_name\n      };\n      var $item = {};\n      var ref = this.inputs[item.field_name];\n\n      if (item.element === 'Checkboxes' || item.element === 'RadioButtons') {\n        var checked_options = [];\n        item.options.forEach(function (option) {\n          var $option = _reactDom2.default.findDOMNode(ref.options['child_ref_' + option.key]);\n\n          if ($option.checked) {\n            checked_options.push(option.key);\n          }\n        });\n        itemData.value = checked_options;\n      } else {\n        if (!ref) return;\n        itemData.value = this._getItemValue(item, ref).value;\n      }\n\n      return itemData;\n    }\n  }, {\n    key: '_collectFormData',\n    value: function _collectFormData(data) {\n      var _this3 = this;\n\n      var formData = [];\n      data.forEach(function (item) {\n        var item_data = _this3._collect(item);\n\n        if (item_data) {\n          formData.push(item_data);\n        }\n      });\n      return formData;\n    }\n  }, {\n    key: '_getSignatureImg',\n    value: function _getSignatureImg(item) {\n      var ref = this.inputs[item.field_name];\n      var $canvas_sig = ref.canvas.current;\n      var base64 = $canvas_sig.toDataURL().replace('data:image/png;base64,', '');\n      var isEmpty = $canvas_sig.isEmpty();\n\n      var $input_sig = _reactDom2.default.findDOMNode(ref.inputField.current);\n\n      if (isEmpty) {\n        $input_sig.value = '';\n      } else {\n        $input_sig.value = base64;\n      }\n\n      return true;\n    }\n  }, {\n    key: 'handleSubmit',\n    value: function handleSubmit(e) {\n      e.preventDefault();\n      var errors = this.validateForm(); // Publish errors, if any.\n\n      this.emitter.emit('formValidation', errors); // Only submit if there are no errors.\n\n      if (errors.length < 1) {\n        var onSubmit = this.props.onSubmit;\n\n        if (onSubmit) {\n          var data = this._collectFormData(this.props.data);\n\n          onSubmit(data);\n        } else {\n          var $form = _reactDom2.default.findDOMNode(this.form);\n\n          $form.submit();\n        }\n      }\n    }\n  }, {\n    key: 'validateForm',\n    value: function validateForm() {\n      var _this4 = this;\n\n      var errors = [];\n      var data_items = this.props.data;\n\n      if (this.props.display_short) {\n        data_items = this.props.data.filter(function (i) {\n          return i.alternateForm === true;\n        });\n      }\n\n      data_items.forEach(function (item) {\n        if (item.element === 'Signature') {\n          _this4._getSignatureImg(item);\n        }\n\n        if (_this4._isInvalid(item)) {\n          errors.push(item.label + ' is required!');\n        }\n\n        if (_this4.props.validateForCorrectness && _this4._isIncorrect(item)) {\n          errors.push(item.label + ' was answered incorrectly!');\n        }\n      });\n      return errors;\n    }\n  }, {\n    key: 'getInputElement',\n    value: function getInputElement(item) {\n      var _this5 = this;\n\n      var Input = FormElements[item.element];\n      return _react2.default.createElement(Input, {\n        handleChange: this.handleChange,\n        ref: function ref(c) {\n          return _this5.inputs[item.field_name] = c;\n        },\n        mutable: true,\n        key: 'form_' + item.id,\n        data: item,\n        read_only: this.props.read_only,\n        defaultValue: this.props.answer_data[item.field_name]\n      });\n    }\n  }, {\n    key: 'getSimpleElement',\n    value: function getSimpleElement(item) {\n      var Element = FormElements[item.element];\n      return _react2.default.createElement(Element, {\n        mutable: true,\n        key: 'form_' + item.id,\n        data: item\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this6 = this;\n\n      var data_items = this.props.data;\n\n      if (this.props.display_short) {\n        data_items = this.props.data.filter(function (i) {\n          return i.alternateForm === true;\n        });\n      }\n\n      data_items.forEach(function (item) {\n        if (item.readOnly && item.variableKey && _this6.props.variables[item.variableKey]) {\n          _this6.props.answer_data[item.field_name] = _this6.props.variables[item.variableKey];\n        }\n      });\n      var items = data_items.map(function (item) {\n        switch (item.element) {\n          case 'TextInput':\n          case 'NumberInput':\n          case 'TextArea':\n          case 'Dropdown':\n          case 'DatePicker':\n          case 'RadioButtons':\n          case 'Rating':\n          case 'Tags':\n          case 'Range':\n            return _this6.getInputElement(item);\n\n          case 'Signature':\n            return _react2.default.createElement(_formElements.Signature, {\n              ref: function ref(c) {\n                return _this6.inputs[item.field_name] = c;\n              },\n              read_only: _this6.props.read_only || item.readOnly,\n              mutable: true,\n              key: 'form_' + item.id,\n              data: item,\n              defaultValue: _this6.props.answer_data[item.field_name]\n            });\n\n          case 'Checkboxes':\n            return _react2.default.createElement(_formElements.Checkboxes, {\n              ref: function ref(c) {\n                return _this6.inputs[item.field_name] = c;\n              },\n              read_only: _this6.props.read_only,\n              handleChange: _this6.handleChange,\n              mutable: true,\n              key: 'form_' + item.id,\n              data: item,\n              defaultValue: _this6._checkboxesDefaultValue(item)\n            });\n\n          case 'Image':\n            return _react2.default.createElement(_formElements.Image, {\n              ref: function ref(c) {\n                return _this6.inputs[item.field_name] = c;\n              },\n              handleChange: _this6.handleChange,\n              mutable: true,\n              key: 'form_' + item.id,\n              data: item,\n              defaultValue: _this6.props.answer_data[item.field_name]\n            });\n\n          case 'Download':\n            return _react2.default.createElement(_formElements.Download, {\n              download_path: _this6.props.download_path,\n              mutable: true,\n              key: 'form_' + item.id,\n              data: item\n            });\n\n          default:\n            return _this6.getSimpleElement(item);\n        }\n      });\n      var formTokenStyle = {\n        display: 'none'\n      };\n      var actionName = this.props.action_name ? this.props.action_name : 'Submit';\n      var backName = this.props.back_name ? this.props.back_name : 'Cancel';\n      return _react2.default.createElement('div', null, _react2.default.createElement(_formValidator2.default, {\n        emitter: this.emitter\n      }), _react2.default.createElement('div', {\n        className: 'react-form-builder-form'\n      }, _react2.default.createElement('form', {\n        encType: 'multipart/form-data',\n        ref: function ref(c) {\n          return _this6.form = c;\n        },\n        action: this.props.form_action,\n        onSubmit: this.handleSubmit.bind(this),\n        method: this.props.form_method\n      }, this.props.authenticity_token && _react2.default.createElement('div', {\n        style: formTokenStyle\n      }, _react2.default.createElement('input', {\n        name: 'utf8',\n        type: 'hidden',\n        value: \"\\u2713\"\n      }), _react2.default.createElement('input', {\n        name: 'authenticity_token',\n        type: 'hidden',\n        value: this.props.authenticity_token\n      }), _react2.default.createElement('input', {\n        name: 'task_id',\n        type: 'hidden',\n        value: this.props.task_id\n      })), items, _react2.default.createElement('div', {\n        className: 'btn-toolbar'\n      }, !this.props.hide_actions && _react2.default.createElement('input', {\n        type: 'submit',\n        className: 'btn btn-school btn-big btn-agree',\n        value: actionName\n      }), !this.props.hide_actions && this.props.back_action && _react2.default.createElement('a', {\n        href: this.props.back_action,\n        className: 'btn btn-default btn-cancel btn-big'\n      }, backName)))));\n    }\n  }]);\n\n  return ReactForm;\n}(_react2.default.Component);\n\nexports.default = ReactForm;\nReactForm.defaultProps = {\n  validateForCorrectness: false\n};","map":null,"metadata":{},"sourceType":"script"}