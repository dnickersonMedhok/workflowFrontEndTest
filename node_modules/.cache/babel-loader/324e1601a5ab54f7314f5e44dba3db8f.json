{"ast":null,"code":"//! api-check version 7.5.5 built with ♥ by Kent C. Dodds <kent@doddsfamily.us> (http://kent.doddsfamily.us) (ó ì_í)=óò=(ì_í ò)\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define(factory);else if (typeof exports === 'object') exports[\"apiCheck\"] = factory();else root[\"apiCheck\"] = factory();\n})(this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId])\n          /******/\n          return installedModules[moduleId].exports;\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n        var module = installedModules[moduleId] = {\n          /******/\n          exports: {},\n\n          /******/\n          id: moduleId,\n\n          /******/\n          loaded: false\n          /******/\n\n        };\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.loaded = true;\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n      __webpack_require__.p = \"\";\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(0);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      var _apiCheck = __webpack_require__(1);\n\n      var _apiCheck2 = _interopRequireDefault(_apiCheck);\n\n      exports['default'] = _apiCheck2['default'];\n      module.exports = exports['default'];\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      var stringify = __webpack_require__(2);\n\n      var apiCheckUtil = __webpack_require__(3);\n\n      var each = apiCheckUtil.each;\n      var isError = apiCheckUtil.isError;\n      var t = apiCheckUtil.t;\n      var arrayify = apiCheckUtil.arrayify;\n      var getCheckerDisplay = apiCheckUtil.getCheckerDisplay;\n      var typeOf = apiCheckUtil.typeOf;\n      var getError = apiCheckUtil.getError;\n\n      var checkers = __webpack_require__(4);\n\n      var apiCheckApis = getApiCheckApis();\n      module.exports = getApiCheckInstance;\n      module.exports.VERSION = \"7.5.5\";\n      module.exports.utils = apiCheckUtil;\n      module.exports.globalConfig = {\n        verbose: false,\n        disabled: false\n      };\n      var apiCheckApiCheck = getApiCheckInstance({\n        output: {\n          prefix: 'apiCheck'\n        }\n      });\n      module.exports.internalChecker = apiCheckApiCheck;\n      each(checkers, function (checker, name) {\n        return module.exports[name] = checker;\n      });\n\n      function getApiCheckInstance() {\n        var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n        var extraCheckers = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n        /* eslint complexity:[2, 6] */\n\n        if (apiCheckApiCheck && arguments.length) {\n          apiCheckApiCheck['throw'](apiCheckApis.getApiCheckInstanceCheckers, arguments, {\n            prefix: 'creating an apiCheck instance'\n          });\n        }\n\n        var additionalProperties = {\n          'throw': getApiCheck(true),\n          warn: getApiCheck(false),\n          getErrorMessage: getErrorMessage,\n          handleErrorMessage: handleErrorMessage,\n          config: {\n            output: config.output || {\n              prefix: '',\n              suffix: '',\n              docsBaseUrl: ''\n            },\n            verbose: config.verbose || false,\n            disabled: config.disabled || false\n          },\n          utils: apiCheckUtil\n        };\n        each(additionalProperties, function (wrapper, name) {\n          return apiCheck[name] = wrapper;\n        });\n        var disabled = apiCheck.disabled || module.exports.globalConfig.disabled;\n        each(checkers.getCheckers(disabled), function (checker, name) {\n          return apiCheck[name] = checker;\n        });\n        each(extraCheckers, function (checker, name) {\n          return apiCheck[name] = checker;\n        });\n        return apiCheck;\n        /**\n         * This is the instance function. Other things are attached to this see additional properties above.\n         * @param {Array} api - the checkers to check with\n         * @param {Array} args - the args to check\n         * @param {Object} output - output options\n         * @returns {Object} - if this has a failed = true property, then it failed\n         */\n\n        function apiCheck(api, args, output) {\n          /* eslint complexity:[2, 8] */\n          if (apiCheck.config.disabled || module.exports.globalConfig.disabled) {\n            return {\n              apiTypes: {},\n              argTypes: {},\n              passed: true,\n              message: '',\n              failed: false\n            }; // empty version of what is normally returned\n          }\n\n          checkApiCheckApi(arguments);\n\n          if (!Array.isArray(api)) {\n            api = [api];\n            args = [args];\n          } else {\n            // turn arguments into an array\n            args = Array.prototype.slice.call(args);\n          }\n\n          var messages = checkEnoughArgs(api, args);\n\n          if (!messages.length) {\n            // this is where we actually go perform the checks.\n            messages = checkApiWithArgs(api, args);\n          }\n\n          var returnObject = getTypes(api, args);\n          returnObject.args = args;\n\n          if (messages.length) {\n            returnObject.message = apiCheck.getErrorMessage(api, args, messages, output);\n            returnObject.failed = true;\n            returnObject.passed = false;\n          } else {\n            returnObject.message = '';\n            returnObject.failed = false;\n            returnObject.passed = true;\n          }\n\n          return returnObject;\n        }\n        /**\n         * checkApiCheckApi, should be read like: check apiCheck api. As in, check the api for apiCheck :-)\n         * @param {Array} checkApiArgs - args provided to apiCheck function\n         */\n\n\n        function checkApiCheckApi(checkApiArgs) {\n          var api = checkApiArgs[0];\n          var args = checkApiArgs[1];\n          var isArrayOrArgs = Array.isArray(args) || args && typeof args === 'object' && typeof args.length === 'number';\n\n          if (Array.isArray(api) && !isArrayOrArgs) {\n            throw new Error(getErrorMessage(api, [args], ['If an array is provided for the api, an array must be provided for the args as well.'], {\n              prefix: 'apiCheck'\n            }));\n          } // dog fooding here\n\n\n          var errors = checkApiWithArgs(apiCheckApis.checkApiCheckApi, checkApiArgs);\n\n          if (errors.length) {\n            var message = apiCheck.getErrorMessage(apiCheckApis.checkApiCheckApi, checkApiArgs, errors, {\n              prefix: 'apiCheck'\n            });\n            apiCheck.handleErrorMessage(message, true);\n          }\n        }\n\n        function getApiCheck(shouldThrow) {\n          return function apiCheckWrapper(api, args, output) {\n            var result = apiCheck(api, args, output);\n            apiCheck.handleErrorMessage(result.message, shouldThrow);\n            return result; // wont get here if an error is thrown\n          };\n        }\n\n        function handleErrorMessage(message, shouldThrow) {\n          if (shouldThrow && message) {\n            throw new Error(message);\n          } else if (message) {\n            /* eslint no-console:0 */\n            console.warn(message);\n          }\n        }\n\n        function getErrorMessage(api, args) {\n          var messages = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];\n          var output = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];\n          var gOut = apiCheck.config.output || {};\n          var prefix = getPrefix();\n          var suffix = getSuffix();\n          var url = getUrl();\n          var message = 'apiCheck failed! ' + messages.join(', ');\n          var passedAndShouldHavePassed = '\\n\\n' + buildMessageFromApiAndArgs(api, args);\n          return (prefix + ' ' + message + ' ' + suffix + ' ' + (url || '') + passedAndShouldHavePassed).trim();\n\n          function getPrefix() {\n            var p = output.onlyPrefix;\n\n            if (!p) {\n              p = ((gOut.prefix || '') + ' ' + (output.prefix || '')).trim();\n            }\n\n            return p;\n          }\n\n          function getSuffix() {\n            var s = output.onlySuffix;\n\n            if (!s) {\n              s = ((output.suffix || '') + ' ' + (gOut.suffix || '')).trim();\n            }\n\n            return s;\n          }\n\n          function getUrl() {\n            var u = output.url;\n\n            if (!u) {\n              u = gOut.docsBaseUrl && output.urlSuffix && ('' + gOut.docsBaseUrl + output.urlSuffix).trim();\n            }\n\n            return u;\n          }\n        }\n\n        function buildMessageFromApiAndArgs(api, args) {\n          var _getTypes = getTypes(api, args);\n\n          var apiTypes = _getTypes.apiTypes;\n          var argTypes = _getTypes.argTypes;\n          var copy = Array.prototype.slice.call(args || []);\n          var replacedItems = [];\n          replaceFunctionWithName(copy);\n          var passedArgs = getObjectString(copy);\n          argTypes = getObjectString(argTypes);\n          apiTypes = getObjectString(apiTypes);\n          return generateMessage(); // functions\n\n          function replaceFunctionWithName(obj) {\n            each(obj, function (val, name) {\n              /* eslint complexity:[2, 6] */\n              if (replacedItems.indexOf(val) === -1) {\n                // avoid recursive problems\n                replacedItems.push(val);\n\n                if (typeof val === 'object') {\n                  replaceFunctionWithName(obj);\n                } else if (typeof val === 'function') {\n                  obj[name] = val.displayName || val.name || 'anonymous function';\n                }\n              }\n            });\n          }\n\n          function getObjectString(types) {\n            if (!types || !types.length) {\n              return 'nothing';\n            } else if (types && types.length === 1) {\n              types = types[0];\n            }\n\n            return stringify(types, null, 2);\n          }\n\n          function generateMessage() {\n            var n = '\\n';\n            var useS = true;\n\n            if (args && args.length === 1) {\n              if (typeof args[0] === 'object' && args[0] !== null) {\n                useS = !!Object.keys(args[0]).length;\n              } else {\n                useS = false;\n              }\n            }\n\n            var types = 'type' + (useS ? 's' : '');\n            var newLine = n + n;\n            return 'You passed:' + n + passedArgs + newLine + ('With the ' + types + ':' + n + argTypes + newLine) + ('The API calls for:' + n + apiTypes);\n          }\n        }\n\n        function getTypes(api, args) {\n          api = arrayify(api);\n          args = arrayify(args);\n          var apiTypes = api.map(function (checker, index) {\n            var specified = module.exports.globalConfig.hasOwnProperty('verbose');\n            return getCheckerDisplay(checker, {\n              terse: specified ? !module.exports.globalConfig.verbose : !apiCheck.config.verbose,\n              obj: args[index],\n              addHelpers: true\n            });\n          });\n          var argTypes = args.map(function (arg) {\n            return getArgDisplay(arg, []);\n          });\n          return {\n            argTypes: argTypes,\n            apiTypes: apiTypes\n          };\n        }\n      } // STATELESS FUNCTIONS\n\n      /**\n       * This is where the magic happens for actually checking the arguments with the api.\n       * @param {Array} api - checkers\n       * @param  {Array} args - and arguments object\n       * @returns {Array} - the error messages\n       */\n\n\n      function checkApiWithArgs(api, args) {\n        /* eslint complexity:[2, 7] */\n        var messages = [];\n        var failed = false;\n        var checkerIndex = 0;\n        var argIndex = 0;\n        var arg = undefined,\n            checker = undefined,\n            res = undefined,\n            lastChecker = undefined,\n            argName = undefined,\n            argFailed = undefined,\n            skipPreviousChecker = undefined;\n        /* jshint -W084 */\n\n        while ((checker = api[checkerIndex++]) && argIndex < args.length) {\n          arg = args[argIndex++];\n          argName = 'Argument ' + argIndex + (checker.isOptional ? ' (optional)' : '');\n          res = checker(arg, 'value', argName);\n          argFailed = isError(res);\n          lastChecker = checkerIndex >= api.length;\n          skipPreviousChecker = checkerIndex > 1 && api[checkerIndex - 1].isOptional;\n\n          if (argFailed && lastChecker || argFailed && !lastChecker && !checker.isOptional && !skipPreviousChecker) {\n            failed = true;\n            messages.push(getCheckerErrorMessage(res, checker, arg));\n          } else if (argFailed && checker.isOptional) {\n            argIndex--;\n          } else {\n            messages.push(t(argName) + ' passed');\n          }\n        }\n\n        return failed ? messages : [];\n      }\n\n      checkerTypeType.type = 'function with __apiCheckData property and `${function.type}` property';\n\n      function checkerTypeType(checkerType, name, location) {\n        var apiCheckDataChecker = checkers.shape({\n          type: checkers.string,\n          optional: checkers.bool\n        });\n        var asFunc = checkers.func.withProperties({\n          __apiCheckData: apiCheckDataChecker\n        });\n        var asShape = checkers.shape({\n          __apiCheckData: apiCheckDataChecker\n        });\n        var wrongShape = checkers.oneOfType([asFunc, asShape])(checkerType, name, location);\n\n        if (isError(wrongShape)) {\n          return wrongShape;\n        }\n\n        if (typeof checkerType !== 'function' && !checkerType.hasOwnProperty(checkerType.__apiCheckData.type)) {\n          return getError(name, location, checkerTypeType.type);\n        }\n      }\n\n      function getCheckerErrorMessage(res, checker, val) {\n        var checkerHelp = getCheckerHelp(checker, val);\n        checkerHelp = checkerHelp ? ' - ' + checkerHelp : '';\n        return res.message + checkerHelp;\n      }\n\n      function getCheckerHelp(_ref, val) {\n        var help = _ref.help;\n\n        if (!help) {\n          return '';\n        }\n\n        if (typeof help === 'function') {\n          help = help(val);\n        }\n\n        return help;\n      }\n\n      function checkEnoughArgs(api, args) {\n        var requiredArgs = api.filter(function (a) {\n          return !a.isOptional;\n        });\n\n        if (args.length < requiredArgs.length) {\n          return ['Not enough arguments specified. Requires `' + requiredArgs.length + '`, you passed `' + args.length + '`'];\n        } else {\n          return [];\n        }\n      }\n\n      function getArgDisplay(arg, gottenArgs) {\n        /* eslint complexity:[2, 7] */\n        var cName = arg && arg.constructor && arg.constructor.name;\n        var type = typeOf(arg);\n\n        if (type === 'function') {\n          if (hasKeys()) {\n            var properties = stringify(getDisplayIfNotGotten());\n            return cName + ' (with properties: ' + properties + ')';\n          }\n\n          return cName;\n        }\n\n        if (arg === null) {\n          return 'null';\n        }\n\n        if (type !== 'array' && type !== 'object') {\n          return type;\n        }\n\n        if (hasKeys()) {\n          return getDisplayIfNotGotten();\n        }\n\n        return cName; // utility functions\n\n        function hasKeys() {\n          return arg && Object.keys(arg).length;\n        }\n\n        function getDisplayIfNotGotten() {\n          if (gottenArgs.indexOf(arg) !== -1) {\n            return '[Circular]';\n          }\n\n          gottenArgs.push(arg);\n          return getDisplay(arg, gottenArgs);\n        }\n      }\n\n      function getDisplay(obj, gottenArgs) {\n        var argDisplay = {};\n        each(obj, function (v, k) {\n          return argDisplay[k] = getArgDisplay(v, gottenArgs);\n        });\n        return argDisplay;\n      }\n\n      function getApiCheckApis() {\n        var os = checkers.string.optional;\n        var checkerFnChecker = checkers.func.withProperties({\n          type: checkers.oneOfType([checkers.string, checkerTypeType]).optional,\n          displayName: checkers.string.optional,\n          shortType: checkers.string.optional,\n          notOptional: checkers.bool.optional,\n          notRequired: checkers.bool.optional\n        });\n        var getApiCheckInstanceCheckers = [checkers.shape({\n          output: checkers.shape({\n            prefix: checkers.string.optional,\n            suffix: checkers.string.optional,\n            docsBaseUrl: checkers.string.optional\n          }).strict.optional,\n          verbose: checkers.bool.optional,\n          disabled: checkers.bool.optional\n        }).strict.optional, checkers.objectOf(checkerFnChecker).optional];\n        var checkApiCheckApi = [checkers.typeOrArrayOf(checkerFnChecker), checkers.any.optional, checkers.shape({\n          prefix: os,\n          suffix: os,\n          urlSuffix: os,\n          // appended case\n          onlyPrefix: os,\n          onlySuffix: os,\n          url: os // override case\n\n        }).strict.optional];\n        return {\n          checkerFnChecker: checkerFnChecker,\n          getApiCheckInstanceCheckers: getApiCheckInstanceCheckers,\n          checkApiCheckApi: checkApiCheckApi\n        };\n      }\n      /***/\n\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports) {\n      module.exports = stringify;\n\n      function getSerialize(fn, decycle) {\n        var seen = [],\n            keys = [];\n\n        decycle = decycle || function (key, value) {\n          return '[Circular ' + getPath(value, seen, keys) + ']';\n        };\n\n        return function (key, value) {\n          var ret = value;\n\n          if (typeof value === 'object' && value) {\n            if (seen.indexOf(value) !== -1) ret = decycle(key, value);else {\n              seen.push(value);\n              keys.push(key);\n            }\n          }\n\n          if (fn) ret = fn(key, ret);\n          return ret;\n        };\n      }\n\n      function getPath(value, seen, keys) {\n        var index = seen.indexOf(value);\n        var path = [keys[index]];\n\n        for (index--; index >= 0; index--) {\n          if (seen[index][path[0]] === value) {\n            value = seen[index];\n            path.unshift(keys[index]);\n          }\n        }\n\n        return '~' + path.join('.');\n      }\n\n      function stringify(obj, fn, spaces, decycle) {\n        return JSON.stringify(obj, getSerialize(fn, decycle), spaces);\n      }\n\n      stringify.getSerialize = getSerialize;\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      function _defineProperty(obj, key, value) {\n        if (key in obj) {\n          Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n          });\n        } else {\n          obj[key] = value;\n        }\n\n        return obj;\n      }\n\n      var stringify = __webpack_require__(2);\n\n      var checkerHelpers = {\n        addOptional: addOptional,\n        getRequiredVersion: getRequiredVersion,\n        setupChecker: setupChecker,\n        addNullable: addNullable\n      };\n      module.exports = {\n        each: each,\n        copy: copy,\n        typeOf: typeOf,\n        arrayify: arrayify,\n        getCheckerDisplay: getCheckerDisplay,\n        isError: isError,\n        list: list,\n        getError: getError,\n        nAtL: nAtL,\n        t: t,\n        undef: undef,\n        checkerHelpers: checkerHelpers,\n        noop: noop\n      };\n\n      function copy(obj) {\n        var type = typeOf(obj);\n        var daCopy = undefined;\n\n        if (type === 'array') {\n          daCopy = [];\n        } else if (type === 'object') {\n          daCopy = {};\n        } else {\n          return obj;\n        }\n\n        each(obj, function (val, key) {\n          daCopy[key] = val; // cannot single-line this because we don't want to abort the each\n        });\n        return daCopy;\n      }\n\n      function typeOf(obj) {\n        if (Array.isArray(obj)) {\n          return 'array';\n        } else if (obj instanceof RegExp) {\n          return 'object';\n        } else {\n          return typeof obj;\n        }\n      }\n\n      function getCheckerDisplay(checker, options) {\n        /* eslint complexity:[2, 7] */\n        var display = undefined;\n        var short = options && options.short;\n\n        if (short && checker.shortType) {\n          display = checker.shortType;\n        } else if (!short && typeof checker.type === 'object' || checker.type === 'function') {\n          display = getCheckerType(checker, options);\n        } else {\n          display = getCheckerType(checker, options) || checker.displayName || checker.name;\n        }\n\n        return display;\n      }\n\n      function getCheckerType(_ref, options) {\n        var type = _ref.type;\n\n        if (typeof type === 'function') {\n          var __apiCheckData = type.__apiCheckData;\n          var typeTypes = type(options);\n          type = _defineProperty({\n            __apiCheckData: __apiCheckData\n          }, __apiCheckData.type, typeTypes);\n        }\n\n        return type;\n      }\n\n      function arrayify(obj) {\n        if (!obj) {\n          return [];\n        } else if (Array.isArray(obj)) {\n          return obj;\n        } else {\n          return [obj];\n        }\n      }\n\n      function each(obj, iterator, context) {\n        if (Array.isArray(obj)) {\n          return eachArry(obj, iterator, context);\n        } else {\n          return eachObj(obj, iterator, context);\n        }\n      }\n\n      function eachObj(obj, iterator, context) {\n        var ret = undefined;\n        var hasOwn = Object.prototype.hasOwnProperty;\n        /* eslint prefer-const:0 */\n        // some weird eslint bug?\n\n        for (var key in obj) {\n          if (hasOwn.call(obj, key)) {\n            ret = iterator.call(context, obj[key], key, obj);\n\n            if (ret === false) {\n              return ret;\n            }\n          }\n        }\n\n        return true;\n      }\n\n      function eachArry(obj, iterator, context) {\n        var ret = undefined;\n        var length = obj.length;\n\n        for (var i = 0; i < length; i++) {\n          ret = iterator.call(context, obj[i], i, obj);\n\n          if (ret === false) {\n            return ret;\n          }\n        }\n\n        return true;\n      }\n\n      function isError(obj) {\n        return obj instanceof Error;\n      }\n\n      function list(arry, join, finalJoin) {\n        arry = arrayify(arry);\n        var copy = arry.slice();\n        var last = copy.pop();\n\n        if (copy.length === 1) {\n          join = ' ';\n        }\n\n        return copy.join(join) + ('' + (copy.length ? join + finalJoin : '') + last);\n      }\n\n      function getError(name, location, checkerType) {\n        if (typeof checkerType === 'function') {\n          checkerType = checkerType({\n            short: true\n          });\n        }\n\n        var stringType = typeof checkerType !== 'object' ? checkerType : stringify(checkerType);\n        return new Error(nAtL(name, location) + ' must be ' + t(stringType));\n      }\n\n      function nAtL(name, location) {\n        var tName = t(name || 'value');\n        var tLocation = !location ? '' : ' at ' + t(location);\n        return '' + tName + tLocation;\n      }\n\n      function t(thing) {\n        return '`' + thing + '`';\n      }\n\n      function undef(thing) {\n        return typeof thing === 'undefined';\n      }\n      /**\n       * This will set up the checker with all of the defaults that most checkers want like required by default and an\n       * optional version\n       *\n       * @param {Function} checker - the checker to setup with properties\n       * @param {Object} properties - properties to add to the checker\n       * @param {boolean} disabled - when set to true, this will set the checker to a no-op function\n       * @returns {Function} checker - the setup checker\n       */\n\n\n      function setupChecker(checker, properties, disabled) {\n        /* eslint complexity:[2, 9] */\n        if (disabled) {\n          // swap out the checker for its own copy of noop\n          checker = getNoop();\n          checker.isNoop = true;\n        }\n\n        if (typeof checker.type === 'string') {\n          checker.shortType = checker.type;\n        } // assign all properties given\n\n\n        each(properties, function (prop, name) {\n          return checker[name] = prop;\n        });\n\n        if (!checker.displayName) {\n          checker.displayName = 'apiCheck ' + t(checker.shortType || checker.type || checker.name) + ' type checker';\n        }\n\n        if (!checker.notRequired) {\n          checker = getRequiredVersion(checker, disabled);\n        }\n\n        if (!checker.notNullable) {\n          addNullable(checker, disabled);\n        }\n\n        if (!checker.notOptional) {\n          addOptional(checker, disabled);\n        }\n\n        return checker;\n      }\n\n      function getRequiredVersion(checker, disabled) {\n        var requiredChecker = disabled ? getNoop() : function requiredChecker(val, name, location, obj) {\n          if (undef(val) && !checker.isOptional) {\n            var tLocation = location ? ' in ' + t(location) : '';\n            var type = getCheckerDisplay(checker, {\n              short: true\n            });\n            var stringType = typeof type !== 'object' ? type : stringify(type);\n            return new Error('Required ' + t(name) + ' not specified' + tLocation + '. Must be ' + t(stringType));\n          } else {\n            return checker(val, name, location, obj);\n          }\n        };\n        copyProps(checker, requiredChecker);\n        requiredChecker.originalChecker = checker;\n        return requiredChecker;\n      }\n\n      function addOptional(checker, disabled) {\n        var optionalCheck = disabled ? getNoop() : function optionalCheck(val, name, location, obj) {\n          if (!undef(val)) {\n            return checker(val, name, location, obj);\n          }\n        }; // inherit all properties on the original checker\n\n        copyProps(checker, optionalCheck);\n        optionalCheck.isOptional = true;\n        optionalCheck.displayName = checker.displayName + ' (optional)';\n        optionalCheck.originalChecker = checker; // the magic line that allows you to add .optional to the end of the checkers\n\n        checker.optional = optionalCheck;\n        fixType(checker, checker.optional);\n      }\n\n      function addNullable(checker, disabled) {\n        var nullableCheck = disabled ? getNoop() : function nullableCheck(val, name, location, obj) {\n          if (val !== null) {\n            return checker(val, name, location, obj);\n          }\n        }; // inherit all properties on the original checker\n\n        copyProps(checker, nullableCheck);\n        nullableCheck.isNullable = true;\n        nullableCheck.displayName = checker.displayName + ' (nullable)';\n        nullableCheck.originalChecker = checker; // the magic line that allows you to add .nullable to the end of the checkers\n\n        checker.nullable = nullableCheck;\n        fixType(checker, checker.nullable);\n\n        if (!checker.notOptional) {\n          addOptional(checker.nullable, disabled);\n        }\n      }\n\n      function fixType(checker, checkerCopy) {\n        // fix type, because it's not a straight copy...\n        // the reason is we need to specify type.__apiCheckData.optional as true for the terse/verbose option.\n        // we also want to add \"(optional)\" to the types with a string\n        if (typeof checkerCopy.type === 'object') {\n          checkerCopy.type = copy(checkerCopy.type); // make our own copy of this\n        } else if (typeof checkerCopy.type === 'function') {\n          checkerCopy.type = function () {\n            return checker.type.apply(checker, arguments);\n          };\n        } else {\n          checkerCopy.type += ' (optional)';\n          return;\n        }\n\n        checkerCopy.type.__apiCheckData = copy(checker.type.__apiCheckData) || {}; // and this\n\n        checkerCopy.type.__apiCheckData.optional = true;\n      } // UTILS\n\n\n      function copyProps(src, dest) {\n        each(Object.keys(src), function (key) {\n          return dest[key] = src[key];\n        });\n      }\n\n      function noop() {}\n\n      function getNoop() {\n        /* eslint no-shadow:0 */\n\n        /* istanbul ignore next */\n        return function noop() {};\n      }\n      /***/\n\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      var stringify = __webpack_require__(2);\n\n      var _require = __webpack_require__(3);\n\n      var typeOf = _require.typeOf;\n      var each = _require.each;\n      var copy = _require.copy;\n      var getCheckerDisplay = _require.getCheckerDisplay;\n      var isError = _require.isError;\n      var arrayify = _require.arrayify;\n      var list = _require.list;\n      var getError = _require.getError;\n      var nAtL = _require.nAtL;\n      var t = _require.t;\n      var checkerHelpers = _require.checkerHelpers;\n      var undef = _require.undef;\n      var setupChecker = checkerHelpers.setupChecker;\n      var checkers = module.exports = getCheckers();\n      module.exports.getCheckers = getCheckers;\n\n      function getCheckers(disabled) {\n        return {\n          array: typeOfCheckGetter('Array'),\n          bool: typeOfCheckGetter('Boolean'),\n          number: typeOfCheckGetter('Number'),\n          string: typeOfCheckGetter('String'),\n          func: funcCheckGetter(),\n          object: objectCheckGetter(),\n          emptyObject: emptyObjectCheckGetter(),\n          instanceOf: instanceCheckGetter,\n          oneOf: oneOfCheckGetter,\n          oneOfType: oneOfTypeCheckGetter,\n          arrayOf: arrayOfCheckGetter,\n          objectOf: objectOfCheckGetter,\n          typeOrArrayOf: typeOrArrayOfCheckGetter,\n          range: rangeCheckGetter,\n          lessThan: lessThanCheckGetter,\n          greaterThan: greaterThanCheckGetter,\n          shape: getShapeCheckGetter(),\n          args: argumentsCheckerGetter(),\n          any: anyCheckGetter(),\n          'null': nullCheckGetter()\n        };\n\n        function typeOfCheckGetter(type) {\n          var lType = type.toLowerCase();\n          return setupChecker(function typeOfCheckerDefinition(val, name, location) {\n            if (typeOf(val) !== lType) {\n              return getError(name, location, type);\n            }\n          }, {\n            type: type\n          }, disabled);\n        }\n\n        function funcCheckGetter() {\n          var type = 'Function';\n          var functionChecker = setupChecker(function functionCheckerDefinition(val, name, location) {\n            if (typeOf(val) !== 'function') {\n              return getError(name, location, type);\n            }\n          }, {\n            type: type\n          }, disabled);\n\n          functionChecker.withProperties = function getWithPropertiesChecker(properties) {\n            var apiError = checkers.objectOf(checkers.func)(properties, 'properties', 'apiCheck.func.withProperties');\n\n            if (isError(apiError)) {\n              throw apiError;\n            }\n\n            var shapeChecker = checkers.shape(properties, true);\n            shapeChecker.type.__apiCheckData.type = 'func.withProperties';\n            return setupChecker(function functionWithPropertiesChecker(val, name, location) {\n              var notFunction = checkers.func(val, name, location);\n\n              if (isError(notFunction)) {\n                return notFunction;\n              }\n\n              return shapeChecker(val, name, location);\n            }, {\n              type: shapeChecker.type,\n              shortType: 'func.withProperties'\n            }, disabled);\n          };\n\n          return functionChecker;\n        }\n\n        function objectCheckGetter() {\n          var type = 'Object';\n          var nullType = 'Object (null ok)';\n          var objectNullOkChecker = setupChecker(function objectNullOkCheckerDefinition(val, name, location) {\n            if (typeOf(val) !== 'object') {\n              return getError(name, location, nullType);\n            }\n          }, {\n            type: nullType\n          }, disabled);\n          var objectChecker = setupChecker(function objectCheckerDefinition(val, name, location) {\n            if (val === null || isError(objectNullOkChecker(val, name, location))) {\n              return getError(name, location, objectChecker.type);\n            }\n          }, {\n            type: type,\n            nullOk: objectNullOkChecker\n          }, disabled);\n          return objectChecker;\n        }\n\n        function instanceCheckGetter(classToCheck) {\n          return setupChecker(function instanceCheckerDefinition(val, name, location) {\n            if (!(val instanceof classToCheck)) {\n              return getError(name, location, classToCheck.name);\n            }\n          }, {\n            type: classToCheck.name\n          }, disabled);\n        }\n\n        function oneOfCheckGetter(enums) {\n          var type = {\n            __apiCheckData: {\n              optional: false,\n              type: 'enum'\n            },\n            'enum': enums\n          };\n          var shortType = 'oneOf[' + enums.map(function (enm) {\n            return stringify(enm);\n          }).join(', ') + ']';\n          return setupChecker(function oneOfCheckerDefinition(val, name, location) {\n            if (!enums.some(function (enm) {\n              return enm === val;\n            })) {\n              return getError(name, location, shortType);\n            }\n          }, {\n            type: type,\n            shortType: shortType\n          }, disabled);\n        }\n\n        function oneOfTypeCheckGetter(typeCheckers) {\n          var checkersDisplay = typeCheckers.map(function (checker) {\n            return getCheckerDisplay(checker, {\n              short: true\n            });\n          });\n          var shortType = 'oneOfType[' + checkersDisplay.join(', ') + ']';\n\n          function type(options) {\n            if (options && options.short) {\n              return shortType;\n            }\n\n            return typeCheckers.map(function (checker) {\n              return getCheckerDisplay(checker, options);\n            });\n          }\n\n          type.__apiCheckData = {\n            optional: false,\n            type: 'oneOfType'\n          };\n          return setupChecker(function oneOfTypeCheckerDefinition(val, name, location) {\n            if (!typeCheckers.some(function (checker) {\n              return !isError(checker(val, name, location));\n            })) {\n              return getError(name, location, shortType);\n            }\n          }, {\n            type: type,\n            shortType: shortType\n          }, disabled);\n        }\n\n        function arrayOfCheckGetter(checker) {\n          var shortCheckerDisplay = getCheckerDisplay(checker, {\n            short: true\n          });\n          var shortType = 'arrayOf[' + shortCheckerDisplay + ']';\n\n          function type(options) {\n            if (options && options.short) {\n              return shortType;\n            }\n\n            return getCheckerDisplay(checker, options);\n          }\n\n          type.__apiCheckData = {\n            optional: false,\n            type: 'arrayOf'\n          };\n          return setupChecker(function arrayOfCheckerDefinition(val, name, location) {\n            if (isError(checkers.array(val)) || !val.every(function (item) {\n              return !isError(checker(item));\n            })) {\n              return getError(name, location, shortType);\n            }\n          }, {\n            type: type,\n            shortType: shortType\n          }, disabled);\n        }\n\n        function objectOfCheckGetter(checker) {\n          var checkerDisplay = getCheckerDisplay(checker, {\n            short: true\n          });\n          var shortType = 'objectOf[' + checkerDisplay + ']';\n\n          function type(options) {\n            if (options && options.short) {\n              return shortType;\n            }\n\n            return getCheckerDisplay(checker, options);\n          }\n\n          type.__apiCheckData = {\n            optional: false,\n            type: 'objectOf'\n          };\n          return setupChecker(function objectOfCheckerDefinition(val, name, location) {\n            var notObject = checkers.object(val, name, location);\n\n            if (isError(notObject)) {\n              return notObject;\n            }\n\n            var allTypesSuccess = each(val, function (item, key) {\n              if (isError(checker(item, key, name))) {\n                return false;\n              }\n            });\n\n            if (!allTypesSuccess) {\n              return getError(name, location, shortType);\n            }\n          }, {\n            type: type,\n            shortType: shortType\n          }, disabled);\n        }\n\n        function typeOrArrayOfCheckGetter(checker) {\n          var checkerDisplay = getCheckerDisplay(checker, {\n            short: true\n          });\n          var shortType = 'typeOrArrayOf[' + checkerDisplay + ']';\n\n          function type(options) {\n            if (options && options.short) {\n              return shortType;\n            }\n\n            return getCheckerDisplay(checker, options);\n          }\n\n          type.__apiCheckData = {\n            optional: false,\n            type: 'typeOrArrayOf'\n          };\n          return setupChecker(function typeOrArrayOfDefinition(val, name, location, obj) {\n            if (isError(checkers.oneOfType([checker, checkers.arrayOf(checker)])(val, name, location, obj))) {\n              return getError(name, location, shortType);\n            }\n          }, {\n            type: type,\n            shortType: shortType\n          }, disabled);\n        }\n\n        function getShapeCheckGetter() {\n          function shapeCheckGetter(shape, nonObject) {\n            var shapeTypes = {};\n            each(shape, function (checker, prop) {\n              shapeTypes[prop] = getCheckerDisplay(checker);\n            });\n\n            function type() {\n              var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n              var ret = {};\n              var terse = options.terse;\n              var obj = options.obj;\n              var addHelpers = options.addHelpers;\n              var parentRequired = options.required;\n              each(shape, function (checker, prop) {\n                /* eslint complexity:[2, 6] */\n                var specified = obj && obj.hasOwnProperty(prop);\n                var required = undef(parentRequired) ? !checker.isOptional : parentRequired;\n\n                if (!terse || specified || !checker.isOptional) {\n                  ret[prop] = getCheckerDisplay(checker, {\n                    terse: terse,\n                    obj: obj && obj[prop],\n                    required: required,\n                    addHelpers: addHelpers\n                  });\n                }\n\n                if (addHelpers) {\n                  modifyTypeDisplayToHelpOut(ret, prop, specified, checker, required);\n                }\n              });\n              return ret;\n\n              function modifyTypeDisplayToHelpOut(theRet, prop, specified, checker, required) {\n                if (!specified && required && !checker.isOptional) {\n                  var item = 'ITEM';\n\n                  if (checker.type && checker.type.__apiCheckData) {\n                    item = checker.type.__apiCheckData.type.toUpperCase();\n                  }\n\n                  addHelper('missing', 'MISSING THIS ' + item, ' <-- YOU ARE MISSING THIS');\n                } else if (specified) {\n                  var error = checker(obj[prop], prop, null, obj);\n\n                  if (isError(error)) {\n                    addHelper('error', 'THIS IS THE PROBLEM: ' + error.message, ' <-- THIS IS THE PROBLEM: ' + error.message);\n                  }\n                }\n\n                function addHelper(property, objectMessage, stringMessage) {\n                  if (typeof theRet[prop] === 'string') {\n                    theRet[prop] += stringMessage;\n                  } else {\n                    theRet[prop].__apiCheckData[property] = objectMessage;\n                  }\n                }\n              }\n            }\n\n            type.__apiCheckData = {\n              strict: false,\n              optional: false,\n              type: 'shape'\n            };\n            var shapeChecker = setupChecker(function shapeCheckerDefinition(val, name, location) {\n              /* eslint complexity:[2, 6] */\n              var isObject = !nonObject && checkers.object(val, name, location);\n\n              if (isError(isObject)) {\n                return isObject;\n              }\n\n              var shapePropError = undefined;\n              location = location ? location + (name ? '/' : '') : '';\n              name = name || '';\n              each(shape, function (checker, prop) {\n                if (val.hasOwnProperty(prop) || !checker.isOptional) {\n                  shapePropError = checker(val[prop], prop, '' + location + name, val);\n                  return !isError(shapePropError);\n                }\n              });\n\n              if (isError(shapePropError)) {\n                return shapePropError;\n              }\n            }, {\n              type: type,\n              shortType: 'shape'\n            }, disabled);\n\n            function strictType() {\n              return type.apply(undefined, arguments);\n            }\n\n            strictType.__apiCheckData = copy(shapeChecker.type.__apiCheckData);\n            strictType.__apiCheckData.strict = true;\n            shapeChecker.strict = setupChecker(function strictShapeCheckerDefinition(val, name, location) {\n              var shapeError = shapeChecker(val, name, location);\n\n              if (isError(shapeError)) {\n                return shapeError;\n              }\n\n              var allowedProperties = Object.keys(shape);\n              var extraProps = Object.keys(val).filter(function (prop) {\n                return allowedProperties.indexOf(prop) === -1;\n              });\n\n              if (extraProps.length) {\n                return new Error(nAtL(name, location) + ' cannot have extra properties: ' + t(extraProps.join('`, `')) + '.' + ('It is limited to ' + t(allowedProperties.join('`, `'))));\n              }\n            }, {\n              type: strictType,\n              shortType: 'strict shape'\n            }, disabled);\n            return shapeChecker;\n          }\n\n          shapeCheckGetter.ifNot = function ifNot(otherProps, propChecker) {\n            if (!Array.isArray(otherProps)) {\n              otherProps = [otherProps];\n            }\n\n            var description = undefined;\n\n            if (otherProps.length === 1) {\n              description = 'specified only if ' + otherProps[0] + ' is not specified';\n            } else {\n              description = 'specified only if none of the following are specified: [' + list(otherProps, ', ', 'and ') + ']';\n            }\n\n            var shortType = 'ifNot[' + otherProps.join(', ') + ']';\n            var type = getTypeForShapeChild(propChecker, description, shortType);\n            return setupChecker(function ifNotChecker(prop, propName, location, obj) {\n              var propExists = obj && obj.hasOwnProperty(propName);\n              var otherPropsExist = otherProps.some(function (otherProp) {\n                return obj && obj.hasOwnProperty(otherProp);\n              });\n\n              if (propExists === otherPropsExist) {\n                return getError(propName, location, type);\n              } else if (propExists) {\n                return propChecker(prop, propName, location, obj);\n              }\n            }, {\n              notRequired: true,\n              type: type,\n              shortType: shortType\n            }, disabled);\n          };\n\n          shapeCheckGetter.onlyIf = function onlyIf(otherProps, propChecker) {\n            otherProps = arrayify(otherProps);\n            var description = undefined;\n\n            if (otherProps.length === 1) {\n              description = 'specified only if ' + otherProps[0] + ' is also specified';\n            } else {\n              description = 'specified only if all of the following are specified: [' + list(otherProps, ', ', 'and ') + ']';\n            }\n\n            var shortType = 'onlyIf[' + otherProps.join(', ') + ']';\n            var type = getTypeForShapeChild(propChecker, description, shortType);\n            return setupChecker(function onlyIfCheckerDefinition(prop, propName, location, obj) {\n              var othersPresent = otherProps.every(function (property) {\n                return obj.hasOwnProperty(property);\n              });\n\n              if (!othersPresent) {\n                return getError(propName, location, type);\n              } else {\n                return propChecker(prop, propName, location, obj);\n              }\n            }, {\n              type: type,\n              shortType: shortType\n            }, disabled);\n          };\n\n          shapeCheckGetter.requiredIfNot = function shapeRequiredIfNot(otherProps, propChecker) {\n            if (!Array.isArray(otherProps)) {\n              otherProps = [otherProps];\n            }\n\n            return getRequiredIfNotChecker(false, otherProps, propChecker);\n          };\n\n          shapeCheckGetter.requiredIfNot.all = function shapeRequiredIfNotAll(otherProps, propChecker) {\n            if (!Array.isArray(otherProps)) {\n              throw new Error('requiredIfNot.all must be passed an array');\n            }\n\n            return getRequiredIfNotChecker(true, otherProps, propChecker);\n          };\n\n          function getRequiredIfNotChecker(all, otherProps, propChecker) {\n            var props = t(otherProps.join(', '));\n            var ifProps = 'if ' + (all ? 'all of' : 'at least one of');\n            var description = 'specified ' + ifProps + ' these are not specified: ' + props + ' (otherwise it\\'s optional)';\n            var shortType = 'requiredIfNot' + (all ? '.all' : '') + '[' + otherProps.join(', ') + '}]';\n            var type = getTypeForShapeChild(propChecker, description, shortType);\n            return setupChecker(function shapeRequiredIfNotDefinition(prop, propName, location, obj) {\n              var propExists = obj && obj.hasOwnProperty(propName);\n              var iteration = all ? 'every' : 'some';\n              var otherPropsExist = otherProps[iteration](function (otherProp) {\n                return obj && obj.hasOwnProperty(otherProp);\n              });\n\n              if (!otherPropsExist && !propExists) {\n                return getError(propName, location, type);\n              } else if (propExists) {\n                return propChecker(prop, propName, location, obj);\n              }\n            }, {\n              type: type,\n              notRequired: true\n            }, disabled);\n          }\n\n          return shapeCheckGetter;\n\n          function getTypeForShapeChild(propChecker, description, shortType) {\n            function type(options) {\n              if (options && options.short) {\n                return shortType;\n              }\n\n              return getCheckerDisplay(propChecker);\n            }\n\n            type.__apiCheckData = {\n              optional: false,\n              type: 'ifNot',\n              description: description\n            };\n            return type;\n          }\n        }\n\n        function argumentsCheckerGetter() {\n          var type = 'function arguments';\n          return setupChecker(function argsCheckerDefinition(val, name, location) {\n            if (Array.isArray(val) || isError(checkers.object(val)) || isError(checkers.number(val.length))) {\n              return getError(name, location, type);\n            }\n          }, {\n            type: type\n          }, disabled);\n        }\n\n        function anyCheckGetter() {\n          return setupChecker(function anyCheckerDefinition() {// don't do anything\n          }, {\n            type: 'any'\n          }, disabled);\n        }\n\n        function nullCheckGetter() {\n          var type = 'null';\n          return setupChecker(function nullChecker(val, name, location) {\n            if (val !== null) {\n              return getError(name, location, type);\n            }\n          }, {\n            type: type\n          }, disabled);\n        }\n\n        function rangeCheckGetter(min, max) {\n          var type = 'Range (' + min + ' - ' + max + ')';\n          return setupChecker(function rangeChecker(val, name, location) {\n            if (typeof val !== 'number' || val < min || val > max) {\n              return getError(name, location, type);\n            }\n          }, {\n            type: type\n          }, disabled);\n        }\n\n        function lessThanCheckGetter(min) {\n          var type = 'lessThan[' + min + ']';\n          return setupChecker(function lessThanChecker(val, name, location) {\n            if (typeof val !== 'number' || val > min) {\n              return getError(name, location, type);\n            }\n          }, {\n            type: type\n          }, disabled);\n        }\n\n        function greaterThanCheckGetter(max) {\n          var type = 'greaterThan[' + max + ']';\n          return setupChecker(function greaterThanChecker(val, name, location) {\n            if (typeof val !== 'number' || val < max) {\n              return getError(name, location, type);\n            }\n          }, {\n            type: type\n          }, disabled);\n        }\n\n        function emptyObjectCheckGetter() {\n          var type = 'empty object';\n          return setupChecker(function emptyObjectChecker(val, name, location) {\n            if (typeOf(val) !== 'object' || val === null || Object.keys(val).length) {\n              return getError(name, location, type);\n            }\n          }, {\n            type: type\n          }, disabled);\n        }\n      }\n      /***/\n\n    }\n    /******/\n    ])\n  );\n});\n\n;","map":null,"metadata":{},"sourceType":"script"}