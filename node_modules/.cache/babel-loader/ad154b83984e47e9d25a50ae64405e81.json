{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _sortableMap = require('sortable-map');\n\nvar _sortableMap2 = _interopRequireDefault(_sortableMap);\n\nvar _maybeBaby = require('maybe-baby');\n\nvar _maybeBaby2 = _interopRequireDefault(_maybeBaby);\n\nvar _forEach2 = require('lodash/forEach');\n\nvar _forEach3 = _interopRequireDefault(_forEach2);\n\nvar _isString2 = require('lodash/isString');\n\nvar _isString3 = _interopRequireDefault(_isString2);\n\nvar _includes2 = require('lodash/includes');\n\nvar _includes3 = _interopRequireDefault(_includes2);\n\nvar _isEmpty2 = require('lodash/isEmpty');\n\nvar _isEmpty3 = _interopRequireDefault(_isEmpty2);\n\nvar _omit2 = require('lodash/omit');\n\nvar _omit3 = _interopRequireDefault(_omit2);\n\nvar _validationService = require('../form/service/validation-service');\n\nvar _validationService2 = _interopRequireDefault(_validationService);\n\nvar _expressionService = require('../form/service/expression-service');\n\nvar _expressionService2 = _interopRequireDefault(_expressionService);\n\nvar _formApiService = require('../form/service/form-api-service');\n\nvar _formApiService2 = _interopRequireDefault(_formApiService);\n\nvar _formConfig = require('../form/config/form-config');\n\nvar _formConfig2 = _interopRequireDefault(_formConfig);\n\nvar _formValidator = require('../form/validation/form-validator');\n\nvar _formValidator2 = _interopRequireDefault(_formValidator);\n\nvar _validationResults = require('../form/validation/validation-results');\n\nvar _validationResults2 = _interopRequireDefault(_validationResults);\n\nvar _common = require('../common');\n\nvar _formConst = require('./config/form-const');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar FIELD = _formConst.PROPERTY.FIELD,\n    DEFINITION = _formConst.PROPERTY.DEFINITION;\n\nvar FormEngine = function () {\n  function FormEngine(definition, model, options) {\n    _classCallCheck(this, FormEngine);\n\n    try {\n      _formApiService2.default.__validateDefinitionShape(definition);\n\n      this.__isDefinitionValid = true;\n    } catch (error) {\n      this.__isDefinitionValid = false;\n      this.error = error;\n      return;\n    }\n\n    this.definition = definition; // Form definition\n\n    this.decorators = definition.decorators || {}; // UI decorators\n\n    this.showConditionTriggerMap = new _sortableMap2.default(); // Map of field ids keyed by trigger id\n\n    this.validator = _formValidator2.default; // Form validator class\n\n    this.validationResults = new _validationResults2.default(); // Stores validation results\n\n    this.model = new _sortableMap2.default();\n    this.sections = new _sortableMap2.default(); // Map of form sections keyed by id\n\n    this.subsections = new _sortableMap2.default(); // Map of form subsections keyed by id\n\n    this.fields = new _sortableMap2.default(); // Map of form fields keyed by ids\n\n    this.__initInstance(model, options);\n  }\n  /**\r\n   * Initialize the form instance\r\n   * @private\r\n   */\n\n\n  _createClass(FormEngine, [{\n    key: '__initInstance',\n    value: function __initInstance(model, options) {\n      this.__hydrateModel(model);\n\n      this.__parseOptions(options);\n\n      this.__cloneSections();\n\n      this.__initFieldMetadata();\n    }\n    /**\r\n     * Hydrate the instance mode with existing data\r\n     * @param model\r\n     * @private\r\n     */\n\n  }, {\n    key: '__hydrateModel',\n    value: function __hydrateModel(model) {\n      var _this = this;\n\n      if (!model || (0, _isEmpty3.default)(model)) return;\n      var parsed = model;\n\n      if (typeof model === 'string') {\n        try {\n          parsed = JSON.parse(model);\n        } catch (e) {\n          console.error('** FormEngine.__hydrateModel: Unable to parse JSON model!');\n          console.error('** You passed: ' + model);\n          parsed = {};\n        }\n      }\n\n      Object.keys(parsed).forEach(function (key) {\n        _this.model.add(key, model[key]);\n      });\n    }\n    /**\r\n     * Parse and apply form options\r\n     * @param options\r\n     * @private\r\n     */\n\n  }, {\n    key: '__parseOptions',\n    value: function __parseOptions(options) {\n      if (!options) return;\n      this.__liveValidation = options.liveValidation || false;\n    }\n    /**\r\n     * Don't modify the original definition. Instead, clone each section\r\n     * into a sortable map; all form instance data will then be\r\n     * applied from these cloned sections, such as validation errors, etc.\r\n     * @private\r\n     */\n\n  }, {\n    key: '__cloneSections',\n    value: function __cloneSections() {\n      var _this2 = this;\n\n      this.getDefinitionSections().forEach(function (section) {\n        _this2.sections.add(section.id, (0, _common.__clone)(section));\n      });\n    }\n    /**\r\n     * Add each cloned subsection a sortable map\r\n     * @private\r\n     */\n\n  }, {\n    key: '__initFieldMetadata',\n    value: function __initFieldMetadata() {\n      var _this3 = this;\n\n      this.sections.forEachValue(function (section) {\n        section.subsections.forEach(function (subsection) {\n          subsection.section = section;\n\n          _this3.__decorateFields(subsection.fields);\n\n          _this3.subsections.add(subsection.id, subsection);\n        });\n      });\n    }\n    /**\r\n     * Decorate an array of fields\r\n     * @param fields\r\n     * @private\r\n     */\n\n  }, {\n    key: '__decorateFields',\n    value: function __decorateFields(fields, parent) {\n      var _this4 = this;\n\n      if (Array.isArray(fields) && !(0, _isEmpty3.default)(fields)) {\n        fields.forEach(function (field) {\n          _this4.__decorateField(field, parent);\n\n          _this4.__decorateFields(field[FIELD.FIELDS], field);\n\n          if (Array.isArray(field[FIELD.OPTIONS]) && !(0, _isEmpty3.default)(field[FIELD.OPTIONS])) {\n            field[FIELD.OPTIONS].forEach(function (option) {\n              option[FIELD.PARENT] = field;\n\n              _this4.__decorateFields(option[FIELD.FIELDS], option);\n            });\n          }\n        });\n      }\n    }\n    /**\r\n     * Decorate a field with metadata such as the React component\r\n     * to render in the UI, the onUpdate function, and any child\r\n     * or option fields.\r\n     * @param id\r\n     * @param field\r\n     * @private\r\n     */\n\n  }, {\n    key: '__decorateField',\n    value: function __decorateField(field, parent) {\n      try {\n        _formApiService2.default.__validateFieldShape(field);\n      } catch (error) {\n        this.__isDefinitionValid = false;\n        this.error = error;\n        return;\n      }\n\n      field[FIELD.PARENT] = parent;\n      field[FIELD.UI_DECORATORS] = this.getCustomUIDecorators(field[FIELD.ID]);\n\n      var _FormConfig$getCompon = _formConfig2.default.getComponentConfig(field[FIELD.TYPE], _formConfig2.default.getComponentTypeByField(field)),\n          actions = _FormConfig$getCompon.actions,\n          component = _FormConfig$getCompon.component,\n          defaultDecorators = _FormConfig$getCompon.defaultDecorators;\n\n      field[FIELD.ACTIONS] = actions;\n      field[FIELD.COMPONENT] = component; // Apply any default decorators\n\n      if (defaultDecorators) {\n        field[FIELD.UI_DECORATORS] = _extends({}, field[FIELD.UI_DECORATORS], defaultDecorators);\n      } // Convert string pattern to RegEx if specified\n\n\n      if ((0, _isString3.default)(field[FIELD.PATTERN])) {\n        field[FIELD.PATTERN] = new RegExp(field[FIELD.PATTERN]);\n      } // Register a show condition if specified\n\n\n      if (field[FIELD.SHOW_CONDITION]) {\n        this.__registerShowCondition(field);\n      } // Add the field to fields\n\n\n      this.fields.add(field[FIELD.ID], field);\n    }\n    /**\r\n     * Register a field's showCondition with the instance. For any\r\n     * form response expressions within the condition, add the form\r\n     * response id (the trigger) to the map, along with the show\r\n     * condition. When given model value is updated in setModelValue(),\r\n     * we check the trigger map and evaluate any available show conditions.\r\n     * If the condition evaluates to false, the field is cleared.\r\n     * @param field\r\n     */\n\n  }, {\n    key: '__registerShowCondition',\n    value: function __registerShowCondition(field) {\n      var _this5 = this;\n\n      var _field$showCondition = field.showCondition,\n          expression = _field$showCondition.expression,\n          expression1 = _field$showCondition.expression1,\n          expression2 = _field$showCondition.expression2;\n      [expression, expression1, expression2].forEach(function (_expression) {\n        if (_expressionService2.default.isFormResponseExpression(_expression)) {\n          var list = _this5.showConditionTriggerMap.find(_expression.id);\n\n          if (!list) {\n            list = [];\n\n            _this5.showConditionTriggerMap.add(_expression.id, list);\n          }\n\n          list.push(field[FIELD.ID]);\n        }\n      });\n    }\n    /**\r\n     * Get form title\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: 'getFormTitle',\n    value: function getFormTitle() {\n      return this.getDefinition().title;\n    }\n    /**\r\n     * Get form icon\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: 'getFormIcon',\n    value: function getFormIcon() {\n      return _maybeBaby2.default.of(this.definition).prop('faIcon').prop('name').join();\n    }\n    /**\r\n     * Get form icon prefix\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: 'getFormIconPrefix',\n    value: function getFormIconPrefix() {\n      return _maybeBaby2.default.of(this.definition).prop('faIcon').prop('prefix').join();\n    }\n    /**\r\n     * Return whether the form consists only\r\n     * of one section and one subsection\r\n     */\n\n  }, {\n    key: 'isSimpleForm',\n    value: function isSimpleForm() {\n      return this.getSections().count() === 1 && this.getSubsections().count() === 1;\n    }\n    /**\r\n     * Return whether the form is valid\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: 'isValid',\n    value: function isValid() {\n      return this.__isDefinitionValid;\n    }\n    /**\r\n     * Get form error\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: 'getError',\n    value: function getError() {\n      return this.error;\n    }\n    /**\r\n     * Get form definition\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: 'getDefinition',\n    value: function getDefinition() {\n      return this.definition;\n    }\n    /**\r\n     * Get the form definition id\r\n     */\n\n  }, {\n    key: 'getId',\n    value: function getId() {\n      return this.getDefinition()[DEFINITION.ID];\n    }\n    /**\r\n     * Get form model\r\n     * @returns {SortableMap}\r\n     */\n\n  }, {\n    key: 'getModel',\n    value: function getModel() {\n      return this.model;\n    }\n    /**\r\n     * Get form model values\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: 'getModelValues',\n    value: function getModelValues() {\n      return this.model.findAll();\n    }\n    /**\r\n     * Serialize the model to json\r\n     * @returns {string}\r\n     */\n\n  }, {\n    key: 'serializeModel',\n    value: function serializeModel() {\n      var store = {};\n      this.getModelValues().forEach(function (entry) {\n        store[entry.key] = entry.value;\n      });\n      return JSON.stringify(store);\n    }\n    /**\r\n     * Get single model value (e.g. form response)\r\n     * @param id\r\n     */\n\n  }, {\n    key: 'getModelValue',\n    value: function getModelValue(id) {\n      return this.model.find(id);\n    }\n    /**\r\n     * Determine if the model contains a key\r\n     * @param id\r\n     * @returns {LoDashExplicitWrapper<boolean>|boolean|Assertion}\r\n     */\n\n  }, {\n    key: 'hasModelValue',\n    value: function hasModelValue(id) {\n      return this.model.has(id);\n    }\n    /**\r\n     * Get form decorators\r\n     * @returns {*|decorators|{str2, str3, str4}|{}}\r\n     */\n\n  }, {\n    key: 'getDecorators',\n    value: function getDecorators() {\n      return this.decorators;\n    }\n    /**\r\n     * Get UI decorator by field id\r\n     * @param id\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: 'getCustomUIDecorators',\n    value: function getCustomUIDecorators(id) {\n      return this.getDecorators()[id];\n    }\n    /**\r\n     * Get sections from the definition\r\n     * @returns {*|Array|sections|{id, title, subtitle, sortOrder, subsections}}\r\n     */\n\n  }, {\n    key: 'getDefinitionSections',\n    value: function getDefinitionSections() {\n      return this.getDefinition().sections;\n    }\n    /**\r\n     * Get form sections\r\n     * @returns {SortableMap|*}\r\n     */\n\n  }, {\n    key: 'getSections',\n    value: function getSections() {\n      return this.sections;\n    }\n    /**\r\n     * Get single form section\r\n     * @param id\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: 'getSection',\n    value: function getSection(id) {\n      return this.getSections().find(id);\n    }\n    /**\r\n     * Get form subsections\r\n     * @returns {SortableMap|*}\r\n     */\n\n  }, {\n    key: 'getSubsections',\n    value: function getSubsections() {\n      return this.subsections;\n    }\n    /**\r\n     * Get single form subsection\r\n     * @param id\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: 'getSubsection',\n    value: function getSubsection(id) {\n      return this.getSubsections().find(id);\n    }\n    /**\r\n     * Get form fields\r\n     * @returns {SortableMap|*}\r\n     */\n\n  }, {\n    key: 'getFields',\n    value: function getFields() {\n      return this.fields;\n    }\n    /**\r\n     * Get single form field\r\n     * @param id\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: 'getField',\n    value: function getField(id) {\n      return this.getFields().find(id);\n    }\n    /**\r\n     * Get all subsection fields (including conditional children)\r\n     * @param subsection\r\n     */\n\n  }, {\n    key: 'getAllSubsectionFields',\n    value: function getAllSubsectionFields(subsection) {\n      if (!subsection || (0, _isEmpty3.default)(subsection.fields)) {\n        return [];\n      }\n\n      return this.__buildFlatFieldList([], subsection.fields);\n    }\n    /**\r\n     * Detemrine if the field is a boolen data type\r\n     * @param field\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: 'isBooleanField',\n    value: function isBooleanField(field) {\n      return field[FIELD.TYPE] === _formConst.DATA_TYPE.BOOLEAN;\n    }\n    /**\r\n     * Set a model value\r\n     * @param id\r\n     * @param value\r\n     * @param field\r\n     */\n\n  }, {\n    key: 'setModelValue',\n    value: function setModelValue(id, value, field) {\n      var _this6 = this; // Set or reset the model value\n\n\n      if (value === this.getModelValue(id)) return;\n\n      if (value === _formConst.NO_VALUE) {\n        field.dirty = false;\n        this.model.delete(id);\n      } else {\n        field.dirty = true;\n        this.model.add(id, value);\n      } // Reset children if necessary\n\n\n      if (this.doResetChildren(field, value)) {\n        this.resetFields(field[FIELD.FIELDS]);\n      } // Reset the children of any option fields if the option is not selected\n\n\n      (0, _forEach3.default)(field[FIELD.OPTIONS], function (option) {\n        if (option[FIELD.FIELDS] && (_this6.isBooleanField(field) && !value || !(0, _includes3.default)(value, option[FIELD.ID]))) {\n          _this6.resetFields(option[FIELD.FIELDS]);\n        }\n      }); // Evaluate the show condition of dependent fields if this field is a trigger\n\n      if (this.showConditionTriggerMap.has(id)) {\n        this.showConditionTriggerMap.find(id).forEach(function (fieldId) {\n          if (_this6.hasModelValue(fieldId) && !_this6.evaluateFieldShowCondition(_this6.getField(fieldId))) {\n            _this6.setModelValue(fieldId, _formConst.NO_VALUE, _this6.getField(fieldId));\n          }\n        });\n      }\n    }\n    /**\r\n     * Reset a specific list of fields, if they contain a model value\r\n     * @param fields\r\n     */\n\n  }, {\n    key: 'resetFields',\n    value: function resetFields(fields) {\n      var _this7 = this;\n\n      (0, _forEach3.default)(fields, function (field) {\n        if (_this7.hasModelValue(field[FIELD.ID]) && !_this7.evaluateFieldShowCondition(field)) {\n          _this7.setModelValue(field[FIELD.ID], _formConst.NO_VALUE, field);\n        }\n      });\n    }\n    /**\r\n     * Determine whether to clear the children of a given field\r\n     * based on its value\r\n     * @param field\r\n     * @param value\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: 'doResetChildren',\n    value: function doResetChildren(field, value) {\n      if (!field[FIELD.FIELDS]) return false;\n\n      switch (field[FIELD.TYPE]) {\n        case _formConst.DATA_TYPE.DATE:\n          return !(0, _common.__hasValue)(value);\n\n        case _formConst.DATA_TYPE.NUMBER:\n          return Number.isNaN(value);\n\n        case _formConst.DATA_TYPE.BOOLEAN:\n          return value === false;\n\n        case _formConst.DATA_TYPE.STRING:\n          return (0, _common.__isBlank)(value);\n\n        case _formConst.DATA_TYPE.ARRAY:\n          return (0, _isEmpty3.default)(value);\n\n        default:\n          {\n            console.warn('Unmapped field type: ' + field[FIELD.TYPE] + ' (id: ' + field[FIELD.ID] + ')');\n            return false;\n          }\n      }\n    }\n    /**\r\n     * Evaluate the show condition of the field\r\n     * @param field\r\n     * @param tag\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: 'evaluateFieldShowCondition',\n    value: function evaluateFieldShowCondition(field) {\n      if (!field.showCondition) return true;\n      return this.evaluateCondition(field.showCondition);\n    }\n    /**\r\n     * Evaluate a condition\r\n     * @param condition\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: 'evaluateCondition',\n    value: function evaluateCondition(condition) {\n      if (!condition) return false;\n      return _expressionService2.default.evalCondition(condition, this);\n    }\n  }, {\n    key: 'isLiveValidation',\n    value: function isLiveValidation() {\n      return this.__liveValidation;\n    }\n  }, {\n    key: 'validate',\n    value: function validate() {\n      this.validationResults.clear();\n      this.validator.validate(this, this.validationResults);\n      this.validationResults.postProcess();\n    }\n  }, {\n    key: 'hasError',\n    value: function hasError() {\n      return this.validationResults.hasError();\n    }\n  }, {\n    key: 'getValidationResults',\n    value: function getValidationResults() {\n      return this.validationResults;\n    }\n  }, {\n    key: 'getValidationResultByTag',\n    value: function getValidationResultByTag(id) {\n      return this.validationResults.getResults(id);\n    }\n  }, {\n    key: 'getValidationStatusByTag',\n    value: function getValidationStatusByTag(id, doNotRecurse) {\n      var _this8 = this;\n\n      var status = this.getValidationResultByTag(id).status;\n\n      if (doNotRecurse) {\n        return status;\n      }\n\n      var field = this.getField(id);\n      (0, _forEach3.default)(field.fields, function (child, index) {\n        var newStatus = _this8.findStatus(field.fields, _this8.getValidationStatusByTag.bind(_this8), true);\n\n        if (_validationService2.default.isMoreSevereStatus(newStatus, status)) {\n          status = newStatus;\n        }\n      });\n      return status;\n    }\n  }, {\n    key: 'findStatus',\n    value: function findStatus(list, getStatus, useId) {\n      var status = _formConst.VALIDATION_CONST.STATUS.OK;\n      (0, _forEach3.default)(list, function (entry) {\n        var newStatus = getStatus(useId ? entry[FIELD.ID] : entry);\n\n        if (_validationService2.default.isMoreSevereStatus(newStatus, status)) {\n          status = newStatus;\n        }\n      });\n      return status;\n    }\n  }, {\n    key: 'getSubsectionStatus',\n    value: function getSubsectionStatus(subsection) {\n      return this.findStatus(subsection.fields, this.getValidationStatusByTag.bind(this), true);\n    }\n  }, {\n    key: 'getSectionStatus',\n    value: function getSectionStatus(section) {\n      return this.findStatus(section.subsections, this.getSubsectionStatus.bind(this));\n    }\n  }, {\n    key: 'fieldHasError',\n    value: function fieldHasError(id) {\n      return _validationService2.default.isError(this.getValidationStatusByTag(id, true));\n    }\n  }, {\n    key: 'subsectionHasError',\n    value: function subsectionHasError(subsection) {\n      return _validationService2.default.isError(this.getSubsectionStatus(subsection));\n    }\n  }, {\n    key: 'sectionHasError',\n    value: function sectionHasError(section) {\n      return _validationService2.default.isError(this.getSectionStatus(section));\n    }\n  }, {\n    key: '__buildFlatFieldList',\n    value: function __buildFlatFieldList() {\n      var _this9 = this;\n\n      var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var fields = arguments[1];\n\n      if (fields) {\n        fields.forEach(function (field) {\n          list.push(Object.assign({}, (0, _omit3.default)(field, _formConst.PROPERTY.FIELDS, _formConst.PROPERTY.OPTIONS)));\n\n          if (field.fields) {\n            _this9.__buildFlatFieldList(list, field.fields);\n          }\n\n          if (field.options) {\n            field.options.forEach(function (option) {\n              if (option.fields) {\n                _this9.__buildFlatFieldList(list, option.fields);\n              }\n            });\n          }\n        });\n      }\n\n      return list;\n    }\n  }]);\n\n  return FormEngine;\n}();\n\nexports.default = FormEngine;","map":null,"metadata":{},"sourceType":"script"}