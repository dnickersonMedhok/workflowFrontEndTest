{"ast":null,"code":"'use strict';\n/**\r\n * Dictionary data structure with flexible sort capabilities\r\n *  - https://github.com/mikechabot/sortable-map\r\n *  - https://www.npmjs.com/package/sortable-map\r\n * @author Mike Chabot\r\n * @constructor\r\n */\n\nfunction SortableMap() {\n  this.store = [];\n}\n/**\r\n * Add an entry to the store\r\n * @param key\r\n * @param value\r\n */\n\n\nSortableMap.prototype.add = function (key, value) {\n  if (!key) throw new Error('key is required');\n  if (typeof key !== 'string') throw new Error('key must be a String');\n  this.store[key] = value;\n};\n/**\r\n * Determine whether a key exists in the store\r\n * @param key\r\n * @returns {boolean}\r\n */\n\n\nSortableMap.prototype.has = function (key) {\n  if (!key) return false;\n  if (typeof key !== 'string') return false;\n  return this.keys().indexOf(key) !== -1;\n};\n/**\r\n * Find a single entry in the store\r\n * @param key\r\n * @returns {*}\r\n */\n\n\nSortableMap.prototype.find = function (key) {\n  if (!key) return;\n  if (typeof key !== 'string') return;\n  return this.store[key];\n};\n/**\r\n * Get all entries in the store\r\n * @returns {*}\r\n */\n\n\nSortableMap.prototype.findAll = function (sortProperty) {\n  var _this = this;\n\n  var list = [];\n\n  if (!sortProperty) {\n    this.keys().sort().forEach(function (key) {\n      list.push({\n        key: key,\n        value: _this.store[key]\n      });\n    });\n  } else {\n    if (typeof sortProperty !== 'string') throw new Error('sortProperty must be a String literal');\n    list = this.__toKeyValue();\n    list.sort(__propertySort.bind(this, sortProperty));\n  }\n\n  return list;\n};\n/**\r\n * Delete an entry from the store\r\n * @param key\r\n * @returns {*}\r\n */\n\n\nSortableMap.prototype.delete = function (key) {\n  if (!key) return;\n  if (typeof key !== 'string') return;\n  var temp = this.store[key];\n  delete this.store[key];\n  return temp;\n};\n/**\r\n * Return the number of entries in the store\r\n * @returns {number}\r\n */\n\n\nSortableMap.prototype.count = function () {\n  var count = 0;\n  this.forEachKey(function () {\n    count++;\n  });\n  return count;\n};\n/**\r\n * Determine whether the store is empty\r\n * @returns {boolean}\r\n */\n\n\nSortableMap.prototype.isEmpty = function () {\n  return this.count() === 0;\n};\n/**\r\n * Clear the store\r\n */\n\n\nSortableMap.prototype.clear = function () {\n  var _this2 = this;\n\n  this.forEachKey(function (key) {\n    delete _this2.store[key];\n  });\n};\n/**\r\n * Get store keys\r\n * @returns {Array}\r\n */\n\n\nSortableMap.prototype.keys = function () {\n  return Object.keys(this.store);\n};\n/**\r\n * Get store keys\r\n * @returns {Array}\r\n */\n\n\nSortableMap.prototype.values = function () {\n  var _this3 = this;\n\n  var values = [];\n  this.forEachKey(function (key) {\n    values.push(_this3.store[key]);\n  });\n  return values;\n};\n/**\r\n * For each store value\r\n * @param callback\r\n */\n\n\nSortableMap.prototype.forEachValue = function (callback) {\n  return this.values().forEach(callback);\n};\n/**\r\n * For each store key\r\n * @param callback\r\n */\n\n\nSortableMap.prototype.forEachKey = function (callback) {\n  return this.keys().forEach(callback);\n};\n/**\r\n * For each entry in the store. Object provided to callback\r\n * contains key and value property.\r\n * @param callback\r\n */\n\n\nSortableMap.prototype.forEach = function (callback) {\n  return this.__toKeyValue().forEach(callback);\n};\n/**\r\n * Helper method that converts the store into an array\r\n * of key-value objects\r\n * @returns {Array}\r\n * @private\r\n */\n\n\nSortableMap.prototype.__toKeyValue = function () {\n  var _this4 = this;\n\n  var array = [];\n  this.forEachKey(function (key) {\n    array.push({\n      key: key,\n      value: _this4.store[key]\n    });\n  });\n  return array;\n};\n\nfunction __propertySort(p, a, b) {\n  return !a.value ? !b.value ? 0 : -1 : !b.value ? 1 : a.value[p] > b.value[p] ? 1 : b.value[p] > a.value[p] ? -1 : 0;\n}\n\nmodule.exports = SortableMap;","map":null,"metadata":{},"sourceType":"script"}