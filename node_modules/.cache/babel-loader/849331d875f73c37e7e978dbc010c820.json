{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _formConst = require('../config/form-const');\n\nvar _validationService = require('../service/validation-service');\n\nvar _validationService2 = _interopRequireDefault(_validationService);\n\nvar _formValidators = require('./form-validators');\n\nvar _formValidators2 = _interopRequireDefault(_formValidators);\n\nvar _common = require('../../common');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar FIELD = _formConst.PROPERTY.FIELD;\n\nfunction __isError(status) {\n  return _validationService2.default.isError(status);\n}\n\nexports.default = {\n  validate: function validate(instance, validationResults) {\n    instance.getFields().forEachValue(function (field) {\n      var id = field[FIELD.ID];\n\n      if (!field.dirty) {\n        return;\n      } // Get model value\n\n\n      var value = instance.getModelValue(id);\n      var isVisible = false;\n\n      if (field[FIELD.SHOW_CONDITION]) {\n        isVisible = instance.evaluateFieldShowCondition(field);\n      }\n\n      if ((0, _common.__hasValue)(value) || isVisible) {\n        // Check required status\n        if (field[FIELD.REQUIRED]) {\n          var requiredStatus = _formValidators2.default.checkRequired(field, value);\n\n          if (__isError(requiredStatus)) {\n            validationResults.addMissingRequired(id, 'Missing required value.', 'SUBMIT');\n          }\n        } // Check numeric validation\n\n\n        if (field[FIELD.TYPE] === _formConst.DATA_TYPE.NUMBER) {\n          var numericStatus = _formValidators2.default.checkNumeric(field, value);\n\n          if (__isError(numericStatus)) {\n            validationResults.addInvalidValue(id, 'Invalid numeric value.', 'SUBMIT');\n          }\n        } // Check regex pattern\n\n\n        if (field[FIELD.PATTERN]) {\n          var conditionMet = _formValidators2.default.checkPattern(field, value);\n\n          if (!conditionMet) {\n            validationResults.addInvalidValue(id, 'Value doesn\\'t match the supplied pattern.', 'SUBMIT');\n          }\n        }\n      }\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"script"}