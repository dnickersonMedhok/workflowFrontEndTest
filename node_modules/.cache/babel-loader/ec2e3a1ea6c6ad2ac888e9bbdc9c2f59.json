{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _beedle = require('beedle');\n\nvar _beedle2 = _interopRequireDefault(_beedle);\n\nvar _requests = require('./requests');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _data = [];\n\nvar _saveUrl = void 0;\n\nvar _onPost = void 0;\n\nvar _onLoad = void 0;\n\nvar store = new _beedle2.default({\n  actions: {\n    setData: function setData(context, data) {\n      _data = data;\n      context.commit('setData', _data);\n    },\n    load: function load(context, _ref) {\n      var _this = this;\n\n      var urlOrData = _ref.loadData,\n          saveUrl = _ref.saveUrl;\n      _saveUrl = saveUrl;\n\n      if (_onLoad) {\n        _onLoad().then(function (x) {\n          return _this.setData(context, x);\n        });\n      } else {\n        if (typeof urlOrData == 'string' || urlOrData instanceof String) {\n          (0, _requests.get)(urlOrData).then(function (x) {\n            return _this.setData(context, x);\n          });\n        } else {\n          this.setData(context, urlOrData);\n        }\n      }\n    },\n    create: function create(context, element) {\n      _data.push(element);\n\n      context.commit('setData', _data);\n      this.save();\n    },\n    delete: function _delete(context, element) {\n      var index = _data.indexOf(element);\n\n      _data.splice(index, 1);\n\n      context.commit('setData', _data);\n      this.save();\n    },\n    updateOrder: function updateOrder(context, elements) {\n      _data = elements;\n      context.commit('setData', _data);\n      this.save();\n    },\n    save: function save() {\n      if (_onPost) {\n        _onPost({\n          task_data: _data\n        });\n      } else if (_saveUrl) {\n        (0, _requests.post)(_saveUrl, {\n          task_data: _data\n        });\n      }\n    }\n  },\n  mutations: {\n    setData: function setData(state, payload) {\n      state.data = payload;\n      return state;\n    }\n  },\n  initialState: {\n    data: []\n  }\n});\n\nstore.setExternalHandler = function (onLoad, onPost) {\n  _onLoad = onLoad;\n  _onPost = onPost;\n};\n\nexports.default = store;","map":null,"metadata":{},"sourceType":"script"}