{"ast":null,"code":"'use strict'; // Private array of chars to use\n\nvar CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\nvar ID = {};\n\nID.uuid = function (len, radix) {\n  var chars = CHARS,\n      uuid = [],\n      i;\n  radix = radix || chars.length;\n\n  if (len) {\n    // Compact form\n    for (i = 0; i < len; i++) {\n      uuid[i] = chars[0 | Math.random() * radix];\n    }\n  } else {\n    // rfc4122, version 4 form\n    var r; // rfc4122 requires these characters\n\n    uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n    uuid[14] = '4'; // Fill in random data.  At i==19 set the high bits of clock sequence as\n    // per rfc4122, sec. 4.1.5\n\n    for (i = 0; i < 36; i++) {\n      if (!uuid[i]) {\n        r = 0 | Math.random() * 16;\n        uuid[i] = chars[i == 19 ? r & 0x3 | 0x8 : r];\n      }\n    }\n  }\n\n  return uuid.join('');\n}; // A more performant, but slightly bulkier, RFC4122v4 solution.  We boost performance\n// by minimizing calls to random()\n\n\nID.uuidFast = function () {\n  var chars = CHARS,\n      uuid = new Array(36),\n      rnd = 0,\n      r;\n\n  for (var i = 0; i < 36; i++) {\n    if (i == 8 || i == 13 || i == 18 || i == 23) {\n      uuid[i] = '-';\n    } else if (i == 14) {\n      uuid[i] = '4';\n    } else {\n      if (rnd <= 0x02) rnd = 0x2000000 + Math.random() * 0x1000000 | 0;\n      r = rnd & 0xf;\n      rnd = rnd >> 4;\n      uuid[i] = chars[i == 19 ? r & 0x3 | 0x8 : r];\n    }\n  }\n\n  return uuid.join('');\n}; // A more compact, but less performant, RFC4122v4 solution:\n\n\nID.uuidCompact = function () {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n        v = c == 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n};\n\nmodule.exports = ID;","map":null,"metadata":{},"sourceType":"script"}