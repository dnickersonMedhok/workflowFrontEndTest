{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _common = require('../../common');\n\nvar _isArray2 = require('lodash/isArray');\n\nvar _isArray3 = _interopRequireDefault(_isArray2);\n\nvar _isEmpty2 = require('lodash/isEmpty');\n\nvar _isEmpty3 = _interopRequireDefault(_isEmpty2);\n\nvar _includes2 = require('lodash/includes');\n\nvar _includes3 = _interopRequireDefault(_includes2);\n\nvar _filter2 = require('lodash/filter');\n\nvar _filter3 = _interopRequireDefault(_filter2);\n\nvar _forEach2 = require('lodash/forEach');\n\nvar _forEach3 = _interopRequireDefault(_forEach2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getConstComparisonCondition(type, val1, val2, orEqualTo) {\n  return {\n    type: type,\n    orEqualTo: orEqualTo,\n    expression1: {\n      type: 'CONST',\n      value: val1\n    },\n    expression2: {\n      type: 'CONST',\n      value: val2\n    }\n  };\n}\n\nvar conditionEvaluators = {\n  BETWEEN: function BETWEEN(service, condition, instance) {\n    var val1 = service.evalExpression(condition.expression1, instance);\n    var val2 = service.evalExpression(condition.expression2, instance);\n    var conditionMet = false;\n\n    if ((0, _isArray3.default)(val2) && val2.length === 2) {\n      var isGreaterThan = service.evalCondition(_getConstComparisonCondition('GREATER_THAN', val1, val2[0], true), instance);\n      var isLessThan = service.evalCondition(_getConstComparisonCondition('LESS_THAN', val1, val2[1], true), instance);\n\n      if (isGreaterThan && isLessThan) {\n        conditionMet = true;\n      }\n    } else {\n      console.warn('Cannot perform operation. Ensure condition is properly formed: ', condition);\n    }\n\n    return conditionMet;\n  },\n  BLANK: function BLANK(service, condition, instance) {\n    var value = service.evalExpression(condition.expression, instance);\n    return (0, _common.__isBlank)(value);\n  },\n  CONTAINS: function CONTAINS(service, condition, instance) {\n    var val1 = service.evalExpression(condition.expression1, instance);\n    var val2 = service.evalExpression(condition.expression2, instance);\n    var conditionMet = false;\n\n    if ((0, _common.__hasValue)(val1) && (0, _common.__hasValue)(val2)) {\n      conditionMet = (0, _includes3.default)(val2, val1);\n    }\n\n    return conditionMet;\n  },\n  EMPTY: function EMPTY(service, condition, instance) {\n    var val = service.evalExpression(condition.expression, instance);\n    var conditionMet = (0, _isEmpty3.default)(val);\n    return conditionMet;\n  },\n  EQUAL: function EQUAL(service, condition, instance) {\n    var val1 = service.evalExpression(condition.expression1, instance);\n    var val2 = service.evalExpression(condition.expression2, instance);\n    var conditionMet = false;\n\n    if ((0, _common.__hasValue)(val1) && (0, _common.__hasValue)(val2)) {\n      conditionMet = val1 === val2;\n    }\n\n    return conditionMet;\n  },\n  // TODO: Create a GREATER_THAN_OR_EQUAL_TO expression?\n  GREATER_THAN: function GREATER_THAN(service, condition, instance) {\n    var diff = evalNumberCondition(service, condition, instance);\n\n    if ((0, _common.__hasValue)(diff)) {\n      return condition.orEqualTo ? diff <= 0 : diff < 0;\n    }\n  },\n  // TODO: Create a LESS_THAN_OR_EQUAL_TO expression?\n  LESS_THAN: function LESS_THAN(service, condition, instance) {\n    var diff = evalNumberCondition(service, condition, instance);\n\n    if ((0, _common.__hasValue)(diff)) {\n      return condition.orEqualTo ? diff >= 0 : diff > 0;\n    }\n  }\n};\n\nfunction evalNumberCondition(service, condition, instance) {\n  var diff = void 0;\n  var val1 = service.evalExpression(condition.expression1, instance);\n  var val2 = service.evalExpression(condition.expression2, instance);\n  var num1 = parseFloat(val1);\n\n  if (!Number.isNaN(num1)) {\n    var num2 = parseFloat(val2);\n\n    if (!Number.isNaN(num2)) {\n      diff = num2 - num1;\n    }\n  }\n\n  return diff;\n}\n\nvar expressionEvaluators = {\n  FORM_RESPONSE: function FORM_RESPONSE(service, expression, instance) {\n    return instance.getModelValue(expression.id);\n  },\n  CONST: function CONST(service, expression, instance) {\n    return expression.value;\n  },\n  ADD: function ADD(service, expression, instance) {\n    var sum = 0;\n    (0, _forEach3.default)(expression.expressions, function (exp) {\n      // TODO: Maybe this becomes FORM_RESPONSE_VALUE?\n      var field = instance.getField(exp.id);\n      var formResponses = service.evalExpression(exp, instance);\n\n      if (!(0, _isEmpty3.default)(formResponses)) {\n        var selections = (0, _filter3.default)(field.options, function (option) {\n          return (0, _includes3.default)(formResponses, option.id);\n        });\n        (0, _forEach3.default)(selections, function (selection) {\n          var valueToAdd = parseInt(selection.value, 10);\n\n          if (!sum) {\n            sum = valueToAdd;\n          } else {\n            sum += valueToAdd;\n          }\n        });\n      }\n    });\n    return sum;\n  }\n};\nvar ExpressionService = {\n  isFormResponseExpression: function isFormResponseExpression(expression) {\n    if (!expression || !expression.type) return false;\n    return expression.type === 'FORM_RESPONSE';\n  },\n  evalCondition: function evalCondition(condition, instance) {\n    var evaluator = conditionEvaluators[condition.type];\n\n    if (!evaluator) {\n      throw new Error('Unmapped condition evaluator: ' + condition.type);\n    }\n\n    var conditionMet = evaluator(this, condition, instance);\n\n    if ((0, _common.__hasValue)(conditionMet) && condition.not) {\n      conditionMet = !conditionMet;\n    }\n\n    return conditionMet;\n  },\n  evalExpression: function evalExpression(expression, instance) {\n    var evaluator = expressionEvaluators[expression.type];\n\n    if (!evaluator) {\n      throw new Error('Unmapped expression evaluator: ' + expression.type);\n    }\n\n    return evaluator(this, expression, instance);\n  }\n};\nexports.default = ExpressionService;","map":null,"metadata":{},"sourceType":"script"}